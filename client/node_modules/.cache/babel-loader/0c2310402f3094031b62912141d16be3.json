{"ast":null,"code":"// //\n// // import React, { useState } from \"react\";\n// // import Notes from \"./notes\";\n// //\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// //\n// // const SpeechToText = () => {\n// //   const [notes, setnotes] = useState([\n// //     { time: \"1\", val: \"Hello Everyone\" },\n// //     { time: \"2\", val: \"Welcome to Scanvue\" },\n// //   ]);\n// //   const {\n// //     transcript,\n// //     listening,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition,\n// //   } = useSpeechRecognition();\n// //   // SpeechRecognition.startListening({ continuous: false });\n// //\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return <span>Browser doesn't support speech recognition.</span>;\n// //   }\n// //\n// //   return (\n// //     <React.Fragment>\n// //       <div\n// //         className=\"row m-2 p-4\"\n// //         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n// //       >\n// //         <h1\n// //           style={{\n// //             fontFamily: \"Georgia, Times, serif\",\n// //             fontSize: \"45px\",\n// //             fontWeight: \"bolder\",\n// //           }}\n// //         >\n// //           Speech To Text\n// //         </h1>\n// //       </div>\n// //       <div className=\"column\">\n// //         <div className=\"row mx-2\">\n// //           <div className=\"col-5 p-5\" style={{ border: \"4px solid #f8f9fa\" }}>\n// //             {!listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Start\" and start speaking.\n// //               </div>\n// //             )}\n// //             {listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Stop\" and stop speaking.\n// //               </div>\n// //             )}\n// //             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n// //             {!listening && (\n// //               <button\n// //                 className=\"btn btn-success \"\n// //                 onClick={() =>\n// //                   SpeechRecognition.startListening({ continuous: true })\n// //                 }\n// //               >\n// //                 Start\n// //               </button>\n// //             )}\n// //             {listening && (\n// //               <button\n// //                 className=\"btn btn-secondary \"\n// //                 onClick={SpeechRecognition.abortListening}\n// //               >\n// //                 Stop\n// //               </button>\n// //             )}\n// //             <button className=\"btn btn-warning mx-2\" onClick={resetTranscript}>\n// //               Reset\n// //             </button>\n// //             <hr />\n// //             {transcript && (\n// //               <React.Fragment>\n// //                 <h5 className=\"mx-3\">You speak:</h5>\n// //                 <div\n// //                   style={{\n// //                     margin: \"4px\",\n// //                     padding: \"10px\",\n// //                     border: \"2px solid #f8f9fa\",\n// //                     borderRadius: \"10px\",\n// //                     background: \"rgba(191, 191, 191, 0.7)\",\n// //                     minHeight: \"90px\",\n// //                   }}\n// //                 >\n// //                   {transcript}\n// //                 </div>\n// //                 <button\n// //                   className=\"btn btn-info mx-2\"\n// //                   onClick={() => {\n// //                     const x = notes;\n// //                     SpeechRecognition.abortListening();\n// //                     x.unshift({ time: Date.now(), val: transcript });\n// //                     setnotes(x);\n// //                     resetTranscript();\n// //                   }}\n// //                 >\n// //                   Save\n// //                 </button>\n// //                 <button\n// //                   className=\"btn btn-info\"\n// //                   onClick={() => {\n// //                     SpeechRecognition.abortListening();\n// //                     navigator.clipboard.writeText(transcript);\n// //                   }}\n// //                 >\n// //                   copy\n// //                 </button>\n// //               </React.Fragment>\n// //             )}\n// //           </div>\n// //           <div\n// //             className=\"col-7 px-5 py-2\"\n// //             style={{\n// //               border: \"4px solid #f8f9fa\",\n// //               height: \"500px\",\n// //             }}\n// //           >\n// //             <Notes notes={notes} setnotes={setnotes} />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </React.Fragment>\n// //   );\n// // };\n// // export default SpeechToText;\n// //\n//\n//\n//\n//\n//\n//\n//\n//\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n//\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\" style={{ overflowX: \"hidden\" }}>\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You speak:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow-x: hidden;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #fff;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n////////////////////////////////////////////////////\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const { speak } = useSpeechSynthesis();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <button\n//               className=\"btn btn-primary\"\n//               disabled={!transcript}\n//               onClick={() => speak({ text: transcript })}\n//             >\n//               Speak Transcription\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You spoke:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//\n//         .phone {\n//           background-color: #fff;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #000;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n/////////////////////////////////\nimport React,{useState}from\"react\";import{useSpeechSynthesis}from\"react-speech-kit\";import SpeechRecognition,{useSpeechRecognition}from\"react-speech-recognition\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const SpeechToText=()=>{const[notes,setNotes]=useState([{time:\"1\",val:\"Hello Everyone\"},{time:\"2\",val:\"Welcome to Scanvue\"}]);const{transcript,listening,resetTranscript,browserSupportsSpeechRecognition}=useSpeechRecognition();const{speak}=useSpeechSynthesis();const handleStartListening=()=>{SpeechRecognition.startListening({continuous:true});};const handleStopListening=()=>{SpeechRecognition.abortListening();};if(!browserSupportsSpeechRecognition){return/*#__PURE__*/_jsx(\"span\",{children:\"Browser doesn't support speech recognition.\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"phone-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"phone\",children:/*#__PURE__*/_jsx(\"div\",{className:\"phone-screen\",children:/*#__PURE__*/_jsx(\"div\",{className:\"assistant-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"assistant-title\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Speech To Text\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-body\",children:[!listening&&/*#__PURE__*/_jsx(\"div\",{className:\"message\",children:\"Please click \\\"Start\\\" and start speaking.\"}),listening&&/*#__PURE__*/_jsx(\"div\",{className:\"message\",children:\"Please click \\\"Stop\\\" to stop speaking.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Microphone: \",listening?\"on\":\"off\"]}),!listening&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-success\",onClick:handleStartListening,children:\"Start\"}),listening&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:handleStopListening,children:\"Stop\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-warning\",onClick:resetTranscript,children:\"Reset\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",disabled:!transcript,onClick:()=>speak({text:transcript}),children:\"Speak Transcription\"}),/*#__PURE__*/_jsx(\"hr\",{}),transcript&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mx-3\",children:\"You spoke:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"transcript\",children:transcript}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-info mx-2\",onClick:()=>{const updatedNotes=[...notes];updatedNotes.unshift({time:Date.now(),val:transcript});setNotes(updatedNotes);resetTranscript();},children:\"Save\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-info\",onClick:()=>{navigator.clipboard.writeText(transcript);resetTranscript();},children:\"Copy\"})]})]})]})})})}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:\"\\n        .phone-container {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          height: 100vh; /* Adjust the height to match FaceRecognition */\\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\\n          overflow: hidden;\\n        }\\n\\n        .phone {\\n          width: 85%; /* Adjust the width to match FaceRecognition */\\n          height: 95%; /* Adjust the height to match FaceRecognition */\\n          max-width: 750px; /* Set maximum width */\\n          max-height: 800px; /* Set maximum height */\\n          background-color: #fff; /* Change background color to white */\\n          border-radius: 20px;\\n          overflow: hidden;\\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\\n        }\\n\\n        .phone-screen {\\n          height: 100%;\\n          overflow-y: auto;\\n          padding: 20px;\\n          display: flex;\\n          flex-direction: column;\\n          justify-content: center;\\n          align-items: center;\\n          color: #000; /* Change text color to black */\\n        }\\n\\n        .assistant-container {\\n          width: 100%;\\n          max-width: 400px;\\n        }\\n\\n        .assistant-content {\\n          text-align: center;\\n        }\\n\\n        .assistant-title {\\n          font-size: 28px;\\n          margin-bottom: 20px;\\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\\n        }\\n\\n        .assistant-body {\\n          text-align: center;\\n          margin-top: 20px;\\n        }\\n\\n        .message {\\n          margin: 10px 0;\\n        }\\n\\n        .transcript {\\n          margin: 4px;\\n          padding: 10px;\\n          border: 2px solid #f8f9fa;\\n          border-radius: 10px;\\n          background: rgba(191, 191, 191, 0.7);\\n          min-height: 90px;\\n        }\\n\\n        .btn {\\n          margin: 10px;\\n        }\\n      \"})]});};export default SpeechToText;","map":{"version":3,"names":["React","useState","useSpeechSynthesis","SpeechRecognition","useSpeechRecognition","jsx","_jsx","jsxs","_jsxs","SpeechToText","notes","setNotes","time","val","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","speak","handleStartListening","startListening","continuous","handleStopListening","abortListening","children","className","onClick","disabled","text","updatedNotes","unshift","Date","now","navigator","clipboard","writeText"],"sources":["D:/PROJECTS/ScanVue/client/src/components/speechToText.jsx"],"sourcesContent":["// //\n// // import React, { useState } from \"react\";\n// // import Notes from \"./notes\";\n// //\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// //\n// // const SpeechToText = () => {\n// //   const [notes, setnotes] = useState([\n// //     { time: \"1\", val: \"Hello Everyone\" },\n// //     { time: \"2\", val: \"Welcome to Scanvue\" },\n// //   ]);\n// //   const {\n// //     transcript,\n// //     listening,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition,\n// //   } = useSpeechRecognition();\n// //   // SpeechRecognition.startListening({ continuous: false });\n// //\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return <span>Browser doesn't support speech recognition.</span>;\n// //   }\n// //\n// //   return (\n// //     <React.Fragment>\n// //       <div\n// //         className=\"row m-2 p-4\"\n// //         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n// //       >\n// //         <h1\n// //           style={{\n// //             fontFamily: \"Georgia, Times, serif\",\n// //             fontSize: \"45px\",\n// //             fontWeight: \"bolder\",\n// //           }}\n// //         >\n// //           Speech To Text\n// //         </h1>\n// //       </div>\n// //       <div className=\"column\">\n// //         <div className=\"row mx-2\">\n// //           <div className=\"col-5 p-5\" style={{ border: \"4px solid #f8f9fa\" }}>\n// //             {!listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Start\" and start speaking.\n// //               </div>\n// //             )}\n// //             {listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Stop\" and stop speaking.\n// //               </div>\n// //             )}\n// //             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n// //             {!listening && (\n// //               <button\n// //                 className=\"btn btn-success \"\n// //                 onClick={() =>\n// //                   SpeechRecognition.startListening({ continuous: true })\n// //                 }\n// //               >\n// //                 Start\n// //               </button>\n// //             )}\n// //             {listening && (\n// //               <button\n// //                 className=\"btn btn-secondary \"\n// //                 onClick={SpeechRecognition.abortListening}\n// //               >\n// //                 Stop\n// //               </button>\n// //             )}\n// //             <button className=\"btn btn-warning mx-2\" onClick={resetTranscript}>\n// //               Reset\n// //             </button>\n// //             <hr />\n// //             {transcript && (\n// //               <React.Fragment>\n// //                 <h5 className=\"mx-3\">You speak:</h5>\n// //                 <div\n// //                   style={{\n// //                     margin: \"4px\",\n// //                     padding: \"10px\",\n// //                     border: \"2px solid #f8f9fa\",\n// //                     borderRadius: \"10px\",\n// //                     background: \"rgba(191, 191, 191, 0.7)\",\n// //                     minHeight: \"90px\",\n// //                   }}\n// //                 >\n// //                   {transcript}\n// //                 </div>\n// //                 <button\n// //                   className=\"btn btn-info mx-2\"\n// //                   onClick={() => {\n// //                     const x = notes;\n// //                     SpeechRecognition.abortListening();\n// //                     x.unshift({ time: Date.now(), val: transcript });\n// //                     setnotes(x);\n// //                     resetTranscript();\n// //                   }}\n// //                 >\n// //                   Save\n// //                 </button>\n// //                 <button\n// //                   className=\"btn btn-info\"\n// //                   onClick={() => {\n// //                     SpeechRecognition.abortListening();\n// //                     navigator.clipboard.writeText(transcript);\n// //                   }}\n// //                 >\n// //                   copy\n// //                 </button>\n// //               </React.Fragment>\n// //             )}\n// //           </div>\n// //           <div\n// //             className=\"col-7 px-5 py-2\"\n// //             style={{\n// //               border: \"4px solid #f8f9fa\",\n// //               height: \"500px\",\n// //             }}\n// //           >\n// //             <Notes notes={notes} setnotes={setnotes} />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </React.Fragment>\n// //   );\n// // };\n// // export default SpeechToText;\n// //\n//\n//\n//\n//\n//\n//\n//\n//\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n//\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\" style={{ overflowX: \"hidden\" }}>\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You speak:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow-x: hidden;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #fff;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n////////////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const { speak } = useSpeechSynthesis();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <button\n//               className=\"btn btn-primary\"\n//               disabled={!transcript}\n//               onClick={() => speak({ text: transcript })}\n//             >\n//               Speak Transcription\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You spoke:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//\n//         .phone {\n//           background-color: #fff;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #000;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n\n/////////////////////////////////\n\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nconst SpeechToText = () => {\n  const [notes, setNotes] = useState([\n    { time: \"1\", val: \"Hello Everyone\" },\n    { time: \"2\", val: \"Welcome to Scanvue\" },\n  ]);\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const { speak } = useSpeechSynthesis();\n\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const handleStopListening = () => {\n    SpeechRecognition.abortListening();\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Speech To Text</h1>\n              </div>\n              <div className=\"assistant-body\">\n                {!listening && (\n                  <div className=\"message\">\n                    Please click \"Start\" and start speaking.\n                  </div>\n                )}\n                {listening && (\n                  <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n                )}\n                <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n                {!listening && (\n                  <button className=\"btn btn-success\" onClick={handleStartListening}>\n                    Start\n                  </button>\n                )}\n                {listening && (\n                  <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n                    Stop\n                  </button>\n                )}\n                <button className=\"btn btn-warning\" onClick={resetTranscript}>\n                  Reset\n                </button>\n                <button\n                  className=\"btn btn-primary\"\n                  disabled={!transcript}\n                  onClick={() => speak({ text: transcript })}\n                >\n                  Speak Transcription\n                </button>\n                <hr />\n                {transcript && (\n                  <div>\n                    <h5 className=\"mx-3\">You spoke:</h5>\n                    <div className=\"transcript\">{transcript}</div>\n                    <button\n                      className=\"btn btn-info mx-2\"\n                      onClick={() => {\n                        const updatedNotes = [...notes];\n                        updatedNotes.unshift({ time: Date.now(), val: transcript });\n                        setNotes(updatedNotes);\n                        resetTranscript();\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      className=\"btn btn-info\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(transcript);\n                        resetTranscript();\n                      }}\n                    >\n                      Copy\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background-color: #fff; /* Change background color to white */\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          color: #000; /* Change text color to black */\n        }\n\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n\n        .assistant-content {\n          text-align: center;\n        }\n\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n\n        .assistant-body {\n          text-align: center;\n          margin-top: 20px;\n        }\n\n        .message {\n          margin: 10px 0;\n        }\n\n        .transcript {\n          margin: 4px;\n          padding: 10px;\n          border: 2px solid #f8f9fa;\n          border-radius: 10px;\n          background: rgba(191, 191, 191, 0.7);\n          min-height: 90px;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"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"},"metadata":{},"sourceType":"module"}