{"ast":null,"code":"// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n////////////////////////////////////// final working code\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const [isListening, setIsListening] = useState(false);\n//\n//   const startListening = () => {\n//     setIsListening(true);\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const stopListening = () => {\n//     setIsListening(false);\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"hii\");\n//       },\n//     },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Assistant</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <h3>Say \"Jarvis\"</h3>\n//                 <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//                 <button\n//                   onClick={isListening ? stopListening : startListening}\n//                   className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n//                 >\n//                   {isListening ? \"Listening\" : \"Start Listening\"}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh; /* Adjust the height to match FaceRecognition */\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow: hidden;\n//         }\n//         .phone {\n//           width: 85%; /* Adjust the width to match FaceRecognition */\n//           height: 95%; /* Adjust the height to match FaceRecognition */\n//           max-width: 750px;\n//           max-height: 800px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           height: 100%;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           background: #fff;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//           text-shadow: 1px 1px 2px #000;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .listening-btn {\n//           background-color: #f00;\n//           color: #fff;\n//           border: none;\n//           border-radius: 5px;\n//           padding: 10px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .listening-btn.listening {\n//           background-color: #00f;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n/////////////////////////////////////////////////// Mike off\nimport React,{useState,useEffect}from\"react\";import SpeechRecognition,{useSpeechRecognition}from\"react-speech-recognition\";import{useHistory}from\"react-router-dom\";import{useSpeechSynthesis}from\"react-speech-kit\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Assistant=()=>{const history=useHistory();const{speak}=useSpeechSynthesis();const[isListening,setIsListening]=useState(false);const{transcript:t1}=useSpeechRecognition();useEffect(()=>{if(!isListening){SpeechRecognition.abortListening();}},[isListening]);const startListening=()=>{setIsListening(true);SpeechRecognition.startListening({continuous:true});};const stopListening=()=>{setIsListening(false);SpeechRecognition.stopListening();};const commands=[{command:\"Go to *\",callback:link=>{const x=\"Redirect to: \".concat(link);console.log(x);if(link===\"object detection\"){speak({text:x});history.push(\"/object-detection\");}else if(link===\"face recognition\"){speak({text:x});history.push(\"/face-recognition\");}else if(link===\"image to text\"){speak({text:x});history.push(\"/image-to-text\");}else if(link===\"text to speech\"){speak({text:x});history.push(\"/text-to-speech\");}else if(link===\"speech to text\"){speak({text:x});history.push(\"/speech-to-text\");}else if(link===\"home\"){speak({text:x});history.push(\"/\");}else{speak({text:\"I don't get it, Please try again!\"});}}},{command:\"Zen\",callback:()=>{speak({text:\"Hi Sir\"});console.log(\"hii\");}}];useSpeechRecognition({commands});return/*#__PURE__*/_jsxs(\"div\",{className:\"phone-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"phone\",children:/*#__PURE__*/_jsx(\"div\",{className:\"phone-screen\",children:/*#__PURE__*/_jsx(\"div\",{className:\"assistant-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"assistant-title\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Assistant\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-body\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Say \\\"Zen\\\"\"}),/*#__PURE__*/_jsx(\"p\",{children:t1?t1:\"Start listening for transcript\"}),/*#__PURE__*/_jsx(\"button\",{onClick:isListening?stopListening:startListening,className:\"listening-btn \".concat(isListening?\"listening\":\"\"),children:isListening?\"Listening\":\"Start Listening\"})]})]})})})}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:\"\\n        .phone-container {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          height: 100vh;\\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\\n          overflow: hidden;\\n        }\\n        .phone {\\n          width: 85%;\\n          height: 95%;\\n          max-width: 750px;\\n          max-height: 800px;\\n          background: #333;\\n          border-radius: 20px;\\n          overflow: hidden;\\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\\n        }\\n        .phone-screen {\\n          height: 100%;\\n          overflow-y: auto;\\n          padding: 20px;\\n          display: flex;\\n          flex-direction: column;\\n          justify-content: center;\\n          align-items: center;\\n          background: #fff;\\n        }\\n        .assistant-container {\\n          width: 100%;\\n          max-width: 400px;\\n        }\\n        .assistant-content {\\n          text-align: center;\\n        }\\n        .assistant-title {\\n          font-size: 28px;\\n          margin-bottom: 20px;\\n          text-shadow: 1px 1px 2px #000;\\n        }\\n        .assistant-body {\\n          margin-top: 20px;\\n        }\\n        .listening-btn {\\n          background-color: #f00;\\n          color: #fff;\\n          border: none;\\n          border-radius: 5px;\\n          padding: 10px;\\n          cursor: pointer;\\n          transition: background-color 0.3s ease;\\n        }\\n        .listening-btn.listening {\\n          background-color: #00f;\\n        }\\n      \"})]});};export default Assistant;","map":{"version":3,"names":["React","useState","useEffect","SpeechRecognition","useSpeechRecognition","useHistory","useSpeechSynthesis","jsx","_jsx","jsxs","_jsxs","Assistant","history","speak","isListening","setIsListening","transcript","t1","abortListening","startListening","continuous","stopListening","commands","command","callback","link","x","concat","console","log","text","push","className","children","onClick"],"sources":["D:/PROJECTS/ScanVue/client/src/components/assistant.jsx"],"sourcesContent":["// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n\n\n\n////////////////////////////////////// final working code\n\n\n\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const [isListening, setIsListening] = useState(false);\n//\n//   const startListening = () => {\n//     setIsListening(true);\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const stopListening = () => {\n//     setIsListening(false);\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"hii\");\n//       },\n//     },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Assistant</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <h3>Say \"Jarvis\"</h3>\n//                 <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//                 <button\n//                   onClick={isListening ? stopListening : startListening}\n//                   className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n//                 >\n//                   {isListening ? \"Listening\" : \"Start Listening\"}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh; /* Adjust the height to match FaceRecognition */\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow: hidden;\n//         }\n//         .phone {\n//           width: 85%; /* Adjust the width to match FaceRecognition */\n//           height: 95%; /* Adjust the height to match FaceRecognition */\n//           max-width: 750px;\n//           max-height: 800px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           height: 100%;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           background: #fff;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//           text-shadow: 1px 1px 2px #000;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .listening-btn {\n//           background-color: #f00;\n//           color: #fff;\n//           border: none;\n//           border-radius: 5px;\n//           padding: 10px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .listening-btn.listening {\n//           background-color: #00f;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n\n/////////////////////////////////////////////////// Mike off\n\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst Assistant = () => {\n  const history = useHistory();\n  const { speak } = useSpeechSynthesis();\n  const [isListening, setIsListening] = useState(false);\n  const { transcript: t1 } = useSpeechRecognition();\n\n  useEffect(() => {\n    if (!isListening) {\n      SpeechRecognition.abortListening();\n    }\n  }, [isListening]);\n\n  const startListening = () => {\n    setIsListening(true);\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const stopListening = () => {\n    setIsListening(false);\n    SpeechRecognition.stopListening();\n  };\n\n  const commands = [\n    {\n      command: \"Go to *\",\n      callback: (link) => {\n        const x = `Redirect to: ${link}`;\n        console.log(x);\n        if (link === \"object detection\") {\n          speak({ text: x });\n          history.push(`/object-detection`);\n        } else if (link === \"face recognition\") {\n          speak({ text: x });\n          history.push(`/face-recognition`);\n        } else if (link === \"image to text\") {\n          speak({ text: x });\n          history.push(`/image-to-text`);\n        } else if (link === \"text to speech\") {\n          speak({ text: x });\n          history.push(`/text-to-speech`);\n        } else if (link === \"speech to text\") {\n          speak({ text: x });\n          history.push(`/speech-to-text`);\n        } else if (link === \"home\") {\n          speak({ text: x });\n          history.push(`/`);\n        } else {\n          speak({ text: \"I don't get it, Please try again!\" });\n        }\n      },\n    },\n    {\n      command: \"Zen\",\n      callback: () => {\n        speak({ text: \"Hi Sir\" });\n        console.log(\"hii\");\n      },\n    },\n  ];\n\n  useSpeechRecognition({ commands });\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Assistant</h1>\n              </div>\n              <div className=\"assistant-body\">\n                <h3>Say \"Zen\"</h3>\n                <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n                <button\n                  onClick={isListening ? stopListening : startListening}\n                  className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n                >\n                  {isListening ? \"Listening\" : \"Start Listening\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n        .phone {\n          width: 85%;\n          height: 95%;\n          max-width: 750px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          background: #fff;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .listening-btn {\n          background-color: #f00;\n          color: #fff;\n          border: none;\n          border-radius: 5px;\n          padding: 10px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .listening-btn.listening {\n          background-color: #00f;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Assistant;\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,iBAAiB,EACtBC,oBAAoB,KACf,0BAA0B,CACjC,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,kBAAkB,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEtD,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,OAAO,CAAGP,UAAU,CAAC,CAAC,CAC5B,KAAM,CAAEQ,KAAM,CAAC,CAAGP,kBAAkB,CAAC,CAAC,CACtC,KAAM,CAACQ,WAAW,CAAEC,cAAc,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAEe,UAAU,CAAEC,EAAG,CAAC,CAAGb,oBAAoB,CAAC,CAAC,CAEjDF,SAAS,CAAC,IAAM,CACd,GAAI,CAACY,WAAW,CAAE,CAChBX,iBAAiB,CAACe,cAAc,CAAC,CAAC,CACpC,CACF,CAAC,CAAE,CAACJ,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAAK,cAAc,CAAGA,CAAA,GAAM,CAC3BJ,cAAc,CAAC,IAAI,CAAC,CACpBZ,iBAAiB,CAACgB,cAAc,CAAC,CAAEC,UAAU,CAAE,IAAK,CAAC,CAAC,CACxD,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1BN,cAAc,CAAC,KAAK,CAAC,CACrBZ,iBAAiB,CAACkB,aAAa,CAAC,CAAC,CACnC,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,CACf,CACEC,OAAO,CAAE,SAAS,CAClBC,QAAQ,CAAGC,IAAI,EAAK,CAClB,KAAM,CAAAC,CAAC,iBAAAC,MAAA,CAAmBF,IAAI,CAAE,CAChCG,OAAO,CAACC,GAAG,CAACH,CAAC,CAAC,CACd,GAAID,IAAI,GAAK,kBAAkB,CAAE,CAC/BZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,oBAAoB,CAAC,CACnC,CAAC,IAAM,IAAIN,IAAI,GAAK,kBAAkB,CAAE,CACtCZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,oBAAoB,CAAC,CACnC,CAAC,IAAM,IAAIN,IAAI,GAAK,eAAe,CAAE,CACnCZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,iBAAiB,CAAC,CAChC,CAAC,IAAM,IAAIN,IAAI,GAAK,gBAAgB,CAAE,CACpCZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,kBAAkB,CAAC,CACjC,CAAC,IAAM,IAAIN,IAAI,GAAK,gBAAgB,CAAE,CACpCZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,kBAAkB,CAAC,CACjC,CAAC,IAAM,IAAIN,IAAI,GAAK,MAAM,CAAE,CAC1BZ,KAAK,CAAC,CAAEiB,IAAI,CAAEJ,CAAE,CAAC,CAAC,CAClBd,OAAO,CAACmB,IAAI,IAAI,CAAC,CACnB,CAAC,IAAM,CACLlB,KAAK,CAAC,CAAEiB,IAAI,CAAE,mCAAoC,CAAC,CAAC,CACtD,CACF,CACF,CAAC,CACD,CACEP,OAAO,CAAE,KAAK,CACdC,QAAQ,CAAEA,CAAA,GAAM,CACdX,KAAK,CAAC,CAAEiB,IAAI,CAAE,QAAS,CAAC,CAAC,CACzBF,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC,CACpB,CACF,CAAC,CACF,CAEDzB,oBAAoB,CAAC,CAAEkB,QAAS,CAAC,CAAC,CAElC,mBACEZ,KAAA,QAAKsB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BzB,IAAA,QAAKwB,SAAS,CAAC,OAAO,CAAAC,QAAA,cACpBzB,IAAA,QAAKwB,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3BzB,IAAA,QAAKwB,SAAS,CAAC,qBAAqB,CAAAC,QAAA,cAClCvB,KAAA,QAAKsB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCzB,IAAA,QAAKwB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BzB,IAAA,OAAAyB,QAAA,CAAI,WAAS,CAAI,CAAC,CACf,CAAC,cACNvB,KAAA,QAAKsB,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BzB,IAAA,OAAAyB,QAAA,CAAI,aAAS,CAAI,CAAC,cAClBzB,IAAA,MAAAyB,QAAA,CAAIhB,EAAE,CAAGA,EAAE,CAAG,gCAAgC,CAAI,CAAC,cACnDT,IAAA,WACE0B,OAAO,CAAEpB,WAAW,CAAGO,aAAa,CAAGF,cAAe,CACtDa,SAAS,kBAAAL,MAAA,CAAmBb,WAAW,CAAG,WAAW,CAAG,EAAE,CAAG,CAAAmB,QAAA,CAE5DnB,WAAW,CAAG,WAAW,CAAG,iBAAiB,CACxC,CAAC,EACN,CAAC,EACH,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,cACNN,IAAA,UAAOD,GAAG,MAAA0B,QAAA,4/CAwDD,CAAC,EACP,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtB,SAAS"},"metadata":{},"sourceType":"module"}