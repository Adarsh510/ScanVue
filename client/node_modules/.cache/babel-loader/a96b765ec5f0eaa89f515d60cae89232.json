{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\ScanVue\\\\client\\\\src\\\\components\\\\speechToText.jsx\",\n  _s = $RefreshSig$();\n// //\n// // import React, { useState } from \"react\";\n// // import Notes from \"./notes\";\n// //\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// //\n// // const SpeechToText = () => {\n// //   const [notes, setnotes] = useState([\n// //     { time: \"1\", val: \"Hello Everyone\" },\n// //     { time: \"2\", val: \"Welcome to Scanvue\" },\n// //   ]);\n// //   const {\n// //     transcript,\n// //     listening,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition,\n// //   } = useSpeechRecognition();\n// //   // SpeechRecognition.startListening({ continuous: false });\n// //\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return <span>Browser doesn't support speech recognition.</span>;\n// //   }\n// //\n// //   return (\n// //     <React.Fragment>\n// //       <div\n// //         className=\"row m-2 p-4\"\n// //         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n// //       >\n// //         <h1\n// //           style={{\n// //             fontFamily: \"Georgia, Times, serif\",\n// //             fontSize: \"45px\",\n// //             fontWeight: \"bolder\",\n// //           }}\n// //         >\n// //           Speech To Text\n// //         </h1>\n// //       </div>\n// //       <div className=\"column\">\n// //         <div className=\"row mx-2\">\n// //           <div className=\"col-5 p-5\" style={{ border: \"4px solid #f8f9fa\" }}>\n// //             {!listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Start\" and start speaking.\n// //               </div>\n// //             )}\n// //             {listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Stop\" and stop speaking.\n// //               </div>\n// //             )}\n// //             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n// //             {!listening && (\n// //               <button\n// //                 className=\"btn btn-success \"\n// //                 onClick={() =>\n// //                   SpeechRecognition.startListening({ continuous: true })\n// //                 }\n// //               >\n// //                 Start\n// //               </button>\n// //             )}\n// //             {listening && (\n// //               <button\n// //                 className=\"btn btn-secondary \"\n// //                 onClick={SpeechRecognition.abortListening}\n// //               >\n// //                 Stop\n// //               </button>\n// //             )}\n// //             <button className=\"btn btn-warning mx-2\" onClick={resetTranscript}>\n// //               Reset\n// //             </button>\n// //             <hr />\n// //             {transcript && (\n// //               <React.Fragment>\n// //                 <h5 className=\"mx-3\">You speak:</h5>\n// //                 <div\n// //                   style={{\n// //                     margin: \"4px\",\n// //                     padding: \"10px\",\n// //                     border: \"2px solid #f8f9fa\",\n// //                     borderRadius: \"10px\",\n// //                     background: \"rgba(191, 191, 191, 0.7)\",\n// //                     minHeight: \"90px\",\n// //                   }}\n// //                 >\n// //                   {transcript}\n// //                 </div>\n// //                 <button\n// //                   className=\"btn btn-info mx-2\"\n// //                   onClick={() => {\n// //                     const x = notes;\n// //                     SpeechRecognition.abortListening();\n// //                     x.unshift({ time: Date.now(), val: transcript });\n// //                     setnotes(x);\n// //                     resetTranscript();\n// //                   }}\n// //                 >\n// //                   Save\n// //                 </button>\n// //                 <button\n// //                   className=\"btn btn-info\"\n// //                   onClick={() => {\n// //                     SpeechRecognition.abortListening();\n// //                     navigator.clipboard.writeText(transcript);\n// //                   }}\n// //                 >\n// //                   copy\n// //                 </button>\n// //               </React.Fragment>\n// //             )}\n// //           </div>\n// //           <div\n// //             className=\"col-7 px-5 py-2\"\n// //             style={{\n// //               border: \"4px solid #f8f9fa\",\n// //               height: \"500px\",\n// //             }}\n// //           >\n// //             <Notes notes={notes} setnotes={setnotes} />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </React.Fragment>\n// //   );\n// // };\n// // export default SpeechToText;\n// //\n//\n//\n//\n//\n//\n//\n//\n//\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n//\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\" style={{ overflowX: \"hidden\" }}>\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You speak:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow-x: hidden;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #fff;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n////////////////////////////////////////////////////\n\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const { speak } = useSpeechSynthesis();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <button\n//               className=\"btn btn-primary\"\n//               disabled={!transcript}\n//               onClick={() => speak({ text: transcript })}\n//             >\n//               Speak Transcription\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You spoke:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//\n//         .phone {\n//           background-color: #fff;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #000;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n/////////////////////////////////\n\nimport React, { useState } from \"react\";\nimport Notes from \"./notes\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [notes, setNotes] = useState([{\n    time: \"1\",\n    val: \"Hello Everyone\"\n  }, {\n    time: \"2\",\n    val: \"Welcome to Scanvue\"\n  }]);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const {\n    speak\n  } = useSpeechSynthesis();\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  const handleStopListening = () => {\n    SpeechRecognition.abortListening();\n  };\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phone-screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"phone-title\",\n          children: \"Speech To Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"phone-content\",\n          children: [!listening && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: \"Please click \\\"Start\\\" and start speaking.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this), listening && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: \"Please click \\\"Stop\\\" to stop speaking.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Microphone: \", listening ? \"on\" : \"off\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this), !listening && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: handleStartListening,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 15\n          }, this), listening && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: handleStopListening,\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning\",\n            onClick: resetTranscript,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            disabled: !transcript,\n            onClick: () => speak({\n              text: transcript\n            }),\n            children: \"Speak Transcription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"mx-3\",\n              children: \"You spoke:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"transcript\",\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-info mx-2\",\n              onClick: () => {\n                const updatedNotes = [...notes];\n                updatedNotes.unshift({\n                  time: Date.now(),\n                  val: transcript\n                });\n                setNotes(updatedNotes);\n                resetTranscript();\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-info\",\n              onClick: () => {\n                navigator.clipboard.writeText(transcript);\n                resetTranscript();\n              },\n              children: \"Copy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: calc(100vh - 40px); /* Subtracting 40px for the footer space */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n\n        .phone {\n          width: calc(100vh * 0.5625); /* 9:16 aspect ratio */\n          background-color: #fff;\n          border-radius: 20px;\n          overflow: hidden;\n        }\n\n        .phone-screen {\n          border-radius: 20px;\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          color: #000;\n        }\n\n        .phone-title {\n          font-family: Arial, sans-serif;\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 20px;\n        }\n\n        .phone-content {\n          text-align: center;\n        }\n\n        .message {\n          margin: 10px 0;\n        }\n\n        .transcript {\n          margin: 4px;\n          padding: 10px;\n          border: 2px solid #f8f9fa;\n          border-radius: 10px;\n          background: rgba(191, 191, 191, 0.7);\n          min-height: 90px;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"xulwL9gA3ZiOhCHDKYRHaMGh2PM=\", false, function () {\n  return [useSpeechRecognition, useSpeechSynthesis];\n});\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","Notes","SpeechRecognition","useSpeechRecognition","useSpeechSynthesis","jsxDEV","_jsxDEV","SpeechToText","_s","notes","setNotes","time","val","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","speak","handleStartListening","startListening","continuous","handleStopListening","abortListening","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","text","updatedNotes","unshift","Date","now","navigator","clipboard","writeText","jsx","_c","$RefreshReg$"],"sources":["D:/PROJECTS/ScanVue/client/src/components/speechToText.jsx"],"sourcesContent":["// //\n// // import React, { useState } from \"react\";\n// // import Notes from \"./notes\";\n// //\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// //\n// // const SpeechToText = () => {\n// //   const [notes, setnotes] = useState([\n// //     { time: \"1\", val: \"Hello Everyone\" },\n// //     { time: \"2\", val: \"Welcome to Scanvue\" },\n// //   ]);\n// //   const {\n// //     transcript,\n// //     listening,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition,\n// //   } = useSpeechRecognition();\n// //   // SpeechRecognition.startListening({ continuous: false });\n// //\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return <span>Browser doesn't support speech recognition.</span>;\n// //   }\n// //\n// //   return (\n// //     <React.Fragment>\n// //       <div\n// //         className=\"row m-2 p-4\"\n// //         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n// //       >\n// //         <h1\n// //           style={{\n// //             fontFamily: \"Georgia, Times, serif\",\n// //             fontSize: \"45px\",\n// //             fontWeight: \"bolder\",\n// //           }}\n// //         >\n// //           Speech To Text\n// //         </h1>\n// //       </div>\n// //       <div className=\"column\">\n// //         <div className=\"row mx-2\">\n// //           <div className=\"col-5 p-5\" style={{ border: \"4px solid #f8f9fa\" }}>\n// //             {!listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Start\" and start speaking.\n// //               </div>\n// //             )}\n// //             {listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Stop\" and stop speaking.\n// //               </div>\n// //             )}\n// //             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n// //             {!listening && (\n// //               <button\n// //                 className=\"btn btn-success \"\n// //                 onClick={() =>\n// //                   SpeechRecognition.startListening({ continuous: true })\n// //                 }\n// //               >\n// //                 Start\n// //               </button>\n// //             )}\n// //             {listening && (\n// //               <button\n// //                 className=\"btn btn-secondary \"\n// //                 onClick={SpeechRecognition.abortListening}\n// //               >\n// //                 Stop\n// //               </button>\n// //             )}\n// //             <button className=\"btn btn-warning mx-2\" onClick={resetTranscript}>\n// //               Reset\n// //             </button>\n// //             <hr />\n// //             {transcript && (\n// //               <React.Fragment>\n// //                 <h5 className=\"mx-3\">You speak:</h5>\n// //                 <div\n// //                   style={{\n// //                     margin: \"4px\",\n// //                     padding: \"10px\",\n// //                     border: \"2px solid #f8f9fa\",\n// //                     borderRadius: \"10px\",\n// //                     background: \"rgba(191, 191, 191, 0.7)\",\n// //                     minHeight: \"90px\",\n// //                   }}\n// //                 >\n// //                   {transcript}\n// //                 </div>\n// //                 <button\n// //                   className=\"btn btn-info mx-2\"\n// //                   onClick={() => {\n// //                     const x = notes;\n// //                     SpeechRecognition.abortListening();\n// //                     x.unshift({ time: Date.now(), val: transcript });\n// //                     setnotes(x);\n// //                     resetTranscript();\n// //                   }}\n// //                 >\n// //                   Save\n// //                 </button>\n// //                 <button\n// //                   className=\"btn btn-info\"\n// //                   onClick={() => {\n// //                     SpeechRecognition.abortListening();\n// //                     navigator.clipboard.writeText(transcript);\n// //                   }}\n// //                 >\n// //                   copy\n// //                 </button>\n// //               </React.Fragment>\n// //             )}\n// //           </div>\n// //           <div\n// //             className=\"col-7 px-5 py-2\"\n// //             style={{\n// //               border: \"4px solid #f8f9fa\",\n// //               height: \"500px\",\n// //             }}\n// //           >\n// //             <Notes notes={notes} setnotes={setnotes} />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </React.Fragment>\n// //   );\n// // };\n// // export default SpeechToText;\n// //\n//\n//\n//\n//\n//\n//\n//\n//\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n//\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\" style={{ overflowX: \"hidden\" }}>\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You speak:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow-x: hidden;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #fff;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n////////////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const { speak } = useSpeechSynthesis();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <button\n//               className=\"btn btn-primary\"\n//               disabled={!transcript}\n//               onClick={() => speak({ text: transcript })}\n//             >\n//               Speak Transcription\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You spoke:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//\n//         .phone {\n//           background-color: #fff;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #000;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n\n/////////////////////////////////\n\n\n\n\nimport React, { useState } from \"react\";\nimport Notes from \"./notes\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst SpeechToText = () => {\n  const [notes, setNotes] = useState([\n    { time: \"1\", val: \"Hello Everyone\" },\n    { time: \"2\", val: \"Welcome to Scanvue\" },\n  ]);\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const { speak } = useSpeechSynthesis();\n\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const handleStopListening = () => {\n    SpeechRecognition.abortListening();\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"phone-title\">Speech To Text</div>\n          <div className=\"phone-content\">\n            {!listening && (\n              <div className=\"message\">\n                Please click \"Start\" and start speaking.\n              </div>\n            )}\n            {listening && (\n              <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n            )}\n            <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n            {!listening && (\n              <button className=\"btn btn-success\" onClick={handleStartListening}>\n                Start\n              </button>\n            )}\n            {listening && (\n              <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n                Stop\n              </button>\n            )}\n            <button className=\"btn btn-warning\" onClick={resetTranscript}>\n              Reset\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              disabled={!transcript}\n              onClick={() => speak({ text: transcript })}\n            >\n              Speak Transcription\n            </button>\n            <hr />\n            {transcript && (\n              <div>\n                <h5 className=\"mx-3\">You spoke:</h5>\n                <div className=\"transcript\">{transcript}</div>\n                <button\n                  className=\"btn btn-info mx-2\"\n                  onClick={() => {\n                    const updatedNotes = [...notes];\n                    updatedNotes.unshift({ time: Date.now(), val: transcript });\n                    setNotes(updatedNotes);\n                    resetTranscript();\n                  }}\n                >\n                  Save\n                </button>\n                <button\n                  className=\"btn btn-info\"\n                  onClick={() => {\n                    navigator.clipboard.writeText(transcript);\n                    resetTranscript();\n                  }}\n                >\n                  Copy\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: calc(100vh - 40px); /* Subtracting 40px for the footer space */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n\n        .phone {\n          width: calc(100vh * 0.5625); /* 9:16 aspect ratio */\n          background-color: #fff;\n          border-radius: 20px;\n          overflow: hidden;\n        }\n\n        .phone-screen {\n          border-radius: 20px;\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          color: #000;\n        }\n\n        .phone-title {\n          font-family: Arial, sans-serif;\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 20px;\n        }\n\n        .phone-content {\n          text-align: center;\n        }\n\n        .message {\n          margin: 10px 0;\n        }\n\n        .transcript {\n          margin: 4px;\n          padding: 10px;\n          border: 2px solid #f8f9fa;\n          border-radius: 10px;\n          background: rgba(191, 191, 191, 0.7);\n          min-height: 90px;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,iBAAiB,IACtBC,oBAAoB,QACf,0BAA0B;AACjC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"},"metadata":{},"sourceType":"module"}