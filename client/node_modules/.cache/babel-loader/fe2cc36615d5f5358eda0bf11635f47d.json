{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\ScanVue\\\\client\\\\src\\\\components\\\\assistant.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n//////////////////////////////\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const [isListening, setIsListening] = useState(false);\n//\n//   const startListening = () => {\n//     setIsListening(true);\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const stopListening = () => {\n//     setIsListening(false);\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"hii\");\n//       },\n//     },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-speaker\"></div>\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Assistant</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <h3>Say \"Hey Jarvis\"</h3>\n//                 <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//                 <button\n//                   onClick={isListening ? stopListening : startListening}\n//                   className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n//                 >\n//                   {isListening ? \"Listening\" : \"Start Listening\"}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"phone-btns\">\n//           <div className=\"phone-btn phone-btn-red\"></div>\n//           <div className=\"phone-btn phone-btn-green\"></div>\n//           <div className=\"phone-btn phone-btn-blue\"></div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           position: relative;\n//           width: 300px;\n//           height: 600px;\n//           background: #000;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-speaker {\n//           position: absolute;\n//           top: 20px;\n//           left: 50%;\n//           transform: translateX(-50%);\n//           width: 50px;\n//           height: 5px;\n//           background: #666;\n//           border-radius: 50px;\n//         }\n//         .phone-screen {\n//           position: relative;\n//           width: 100%;\n//           height: 100%; /* Adjusted height */\n//           background: #fff;\n//           overflow-y: auto;\n//           padding: 20px;\n//         }\n//         .assistant-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100%;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-family: Georgia, Times, serif;\n//           font-size: 32px;\n//           font-weight: bolder;\n//           margin-bottom: 20px;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .listening-btn {\n//           background-color: #f00;\n//           color: #fff;\n//           border: none;\n//           border-radius: 5px;\n//           padding: 10px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .listening-btn.listening {\n//           background-color: #00f;\n//         }\n//         .phone-btns {\n//           position: absolute;\n//           bottom: 10px;\n//           left: 50%;\n//           transform: translateX(-50%);\n//           display: flex;\n//         }\n//         .phone-btn {\n//           width: 20px;\n//           height: 20px;\n//           border-radius: 50%;\n//           margin: 0 5px;\n//         }\n//         .phone-btn-red {\n//           background: #f00;\n//         }\n//         .phone-btn-green {\n//           background: #0f0;\n//         }\n//         .phone-btn-blue {\n//           background: #00f;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n//////////////////////////////////////\n\nimport React, { useState, useEffect } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Assistant = () => {\n  _s();\n  const history = useHistory();\n  const {\n    speak\n  } = useSpeechSynthesis();\n  const {\n    stopListening\n  } = useSpeechRecognition();\n  const [isListening, setIsListening] = useState(false);\n  useEffect(() => {\n    return () => {\n      stopListening(); // Stop listening when component unmounts\n    };\n  }, [stopListening]);\n  const startListening = () => {\n    setIsListening(true);\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  const stopListeningHandler = () => {\n    setIsListening(false);\n    SpeechRecognition.stopListening();\n  };\n  const redirectHandler = link => {\n    const x = `Redirect to: ${link}`;\n    console.log(x);\n    if (link === \"object detection\") {\n      speak({\n        text: x\n      });\n      history.push(`/object-detection`);\n    } else if (link === \"face recognition\") {\n      speak({\n        text: x\n      });\n      history.push(`/face-recognition`);\n    } else if (link === \"image to text\") {\n      speak({\n        text: x\n      });\n      history.push(`/image-to-text`);\n    } else if (link === \"text to speech\") {\n      speak({\n        text: x\n      });\n      history.push(`/text-to-speech`);\n    } else if (link === \"speech to text\") {\n      speak({\n        text: x\n      });\n      history.push(`/speech-to-text`);\n    } else if (link === \"home\") {\n      speak({\n        text: x\n      });\n      history.push(`/`);\n    } else {\n      speak({\n        text: \"I don't get it, Please try again!\"\n      });\n    }\n  };\n  const commands = [{\n    command: \"Go to *\",\n    callback: link => redirectHandler(link)\n  }, {\n    command: \"Hey Jarvis\",\n    callback: () => {\n      speak({\n        text: \"Hi Sir\"\n      });\n      console.log(\"hii\");\n    }\n  }];\n  const {\n    transcript: t1\n  } = useSpeechRecognition({\n    commands\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phone-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"assistant-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"assistant-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-title\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Assistant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Say \\\"Hey Jarvis\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: t1 ? t1 : \"Start listening for transcript\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: isListening ? stopListeningHandler : startListening,\n                className: `listening-btn ${isListening ? \"listening\" : \"\"}`,\n                children: isListening ? \"Listening\" : \"Start Listening\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n        .phone {\n          width: 60%;\n          height: 90%;\n          max-width: 600px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          background: #fff;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .listening-btn {\n          background-color: #f00;\n          color: #fff;\n          border: none;\n          border-radius: 5px;\n          padding: 10px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .listening-btn.listening {\n          background-color: #00f;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n_s(Assistant, \"zo7gvvUvH0PmwzjXeMF+XY4N9sM=\", false, function () {\n  return [useHistory, useSpeechSynthesis, useSpeechRecognition, useSpeechRecognition];\n});\n_c = Assistant;\nexport default Assistant;\nvar _c;\n$RefreshReg$(_c, \"Assistant\");","map":{"version":3,"names":["React","useState","useEffect","SpeechRecognition","useSpeechRecognition","useHistory","useSpeechSynthesis","jsxDEV","_jsxDEV","Assistant","_s","history","speak","stopListening","isListening","setIsListening","startListening","continuous","stopListeningHandler","redirectHandler","link","x","console","log","text","push","commands","command","callback","transcript","t1","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","jsx","_c","$RefreshReg$"],"sources":["D:/PROJECTS/ScanVue/client/src/components/assistant.jsx"],"sourcesContent":["// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n\n\n\n\n//////////////////////////////\n\n\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const [isListening, setIsListening] = useState(false);\n//\n//   const startListening = () => {\n//     setIsListening(true);\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const stopListening = () => {\n//     setIsListening(false);\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"hii\");\n//       },\n//     },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-speaker\"></div>\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Assistant</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <h3>Say \"Hey Jarvis\"</h3>\n//                 <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//                 <button\n//                   onClick={isListening ? stopListening : startListening}\n//                   className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n//                 >\n//                   {isListening ? \"Listening\" : \"Start Listening\"}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"phone-btns\">\n//           <div className=\"phone-btn phone-btn-red\"></div>\n//           <div className=\"phone-btn phone-btn-green\"></div>\n//           <div className=\"phone-btn phone-btn-blue\"></div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           position: relative;\n//           width: 300px;\n//           height: 600px;\n//           background: #000;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-speaker {\n//           position: absolute;\n//           top: 20px;\n//           left: 50%;\n//           transform: translateX(-50%);\n//           width: 50px;\n//           height: 5px;\n//           background: #666;\n//           border-radius: 50px;\n//         }\n//         .phone-screen {\n//           position: relative;\n//           width: 100%;\n//           height: 100%; /* Adjusted height */\n//           background: #fff;\n//           overflow-y: auto;\n//           padding: 20px;\n//         }\n//         .assistant-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100%;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-family: Georgia, Times, serif;\n//           font-size: 32px;\n//           font-weight: bolder;\n//           margin-bottom: 20px;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .listening-btn {\n//           background-color: #f00;\n//           color: #fff;\n//           border: none;\n//           border-radius: 5px;\n//           padding: 10px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .listening-btn.listening {\n//           background-color: #00f;\n//         }\n//         .phone-btns {\n//           position: absolute;\n//           bottom: 10px;\n//           left: 50%;\n//           transform: translateX(-50%);\n//           display: flex;\n//         }\n//         .phone-btn {\n//           width: 20px;\n//           height: 20px;\n//           border-radius: 50%;\n//           margin: 0 5px;\n//         }\n//         .phone-btn-red {\n//           background: #f00;\n//         }\n//         .phone-btn-green {\n//           background: #0f0;\n//         }\n//         .phone-btn-blue {\n//           background: #00f;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n//////////////////////////////////////\n\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst Assistant = () => {\n  const history = useHistory();\n  const { speak } = useSpeechSynthesis();\n  const { stopListening } = useSpeechRecognition();\n  const [isListening, setIsListening] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      stopListening(); // Stop listening when component unmounts\n    };\n  }, [stopListening]);\n\n  const startListening = () => {\n    setIsListening(true);\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const stopListeningHandler = () => {\n    setIsListening(false);\n    SpeechRecognition.stopListening();\n  };\n\n  const redirectHandler = (link) => {\n    const x = `Redirect to: ${link}`;\n    console.log(x);\n    if (link === \"object detection\") {\n      speak({ text: x });\n      history.push(`/object-detection`);\n    } else if (link === \"face recognition\") {\n      speak({ text: x });\n      history.push(`/face-recognition`);\n    } else if (link === \"image to text\") {\n      speak({ text: x });\n      history.push(`/image-to-text`);\n    } else if (link === \"text to speech\") {\n      speak({ text: x });\n      history.push(`/text-to-speech`);\n    } else if (link === \"speech to text\") {\n      speak({ text: x });\n      history.push(`/speech-to-text`);\n    } else if (link === \"home\") {\n      speak({ text: x });\n      history.push(`/`);\n    } else {\n      speak({ text: \"I don't get it, Please try again!\" });\n    }\n  };\n\n  const commands = [\n    {\n      command: \"Go to *\",\n      callback: (link) => redirectHandler(link),\n    },\n    {\n      command: \"Hey Jarvis\",\n      callback: () => {\n        speak({ text: \"Hi Sir\" });\n        console.log(\"hii\");\n      },\n    },\n  ];\n  const { transcript: t1 } = useSpeechRecognition({ commands });\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Assistant</h1>\n              </div>\n              <div className=\"assistant-body\">\n                <h3>Say \"Hey Jarvis\"</h3>\n                <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n                <button\n                  onClick={isListening ? stopListeningHandler : startListening}\n                  className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n                >\n                  {isListening ? \"Listening\" : \"Start Listening\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n        .phone {\n          width: 60%;\n          height: 90%;\n          max-width: 600px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          background: #fff;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .listening-btn {\n          background-color: #f00;\n          color: #fff;\n          border: none;\n          border-radius: 5px;\n          padding: 10px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .listening-btn.listening {\n          background-color: #00f;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Assistant;\n"],"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"},"metadata":{},"sourceType":"module"}