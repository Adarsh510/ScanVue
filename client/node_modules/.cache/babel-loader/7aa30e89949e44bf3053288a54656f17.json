{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\ScanVue\\\\client\\\\src\\\\components\\\\assistant.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n////////////////////////////////////////////////////////////////////////////\n\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const { transcript: t1 } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"Hi\");\n//       },\n//     },\n//   ];\n//\n//   return (\n//     <div style={{ textAlign: \"center\", fontFamily: \"Arial\" }}>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//             textShadow: \"2px 2px 4px rgba(0, 0, 0, 0.5)\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button className=\"btn btn-primary\" onClick={handleStartListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button className=\"btn btn-danger\" onClick={handleStopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n//\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const { transcript: t1 } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"Hi\");\n//       },\n//     },\n//   ];\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Assistant</div>\n//           <div className=\"phone-content\">\n//             <h3>Say \"Hey Jarvis\"</h3>\n//             <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//             <button className=\"btn btn-primary\" onClick={handleStartListening}>\n//               Start listening\n//             </button>\n//             <button className=\"btn btn-danger\" onClick={handleStopListening}>\n//               Stop listening\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           width: 300px;\n//         }\n//\n//         .phone-screen {\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           color: #fff;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//           color: #fff;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Assistant = () => {\n  _s();\n  const history = useHistory();\n  const {\n    speak\n  } = useSpeechSynthesis();\n  const handleStartListening = () => {\n    // Add your code to start listening for speech here\n    console.log(\"Listening started\");\n  };\n  const handleStopListening = () => {\n    // Add your code to stop listening for speech here\n    console.log(\"Listening stopped\");\n  };\n  const handleVoiceCommand = command => {\n    const x = `Redirect to: ${command}`;\n    console.log(x);\n    switch (command.toLowerCase()) {\n      case \"object detection\":\n        speak({\n          text: x\n        });\n        history.push(`/object-detection`);\n        break;\n      case \"face recognition\":\n        speak({\n          text: x\n        });\n        history.push(`/face-recognition`);\n        break;\n      case \"image to text\":\n        speak({\n          text: x\n        });\n        history.push(`/image-to-text`);\n        break;\n      case \"text to speech\":\n        speak({\n          text: x\n        });\n        history.push(`/text-to-speech`);\n        break;\n      case \"speech to text\":\n        speak({\n          text: x\n        });\n        history.push(`/speech-to-text`);\n        break;\n      case \"home\":\n        speak({\n          text: x\n        });\n        history.push(`/`);\n        break;\n      case \"hey jarvis\":\n        speak({\n          text: \"Hi Sir\"\n        });\n        console.log(\"Hi\");\n        break;\n      default:\n        speak({\n          text: \"I don't understand, please try again!\"\n        });\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phone-screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"phone-title\",\n          children: \"Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"phone-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Say \\\"Hey Jarvis\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start listening for transcript\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: handleStartListening,\n            children: \"Start listening\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: handleStopListening,\n            children: \"Stop listening\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n        }\n\n        .phone {\n          background-color: #000;\n          border-radius: 40px;\n          overflow: hidden;\n          width: 300px;\n        }\n\n        .phone-screen {\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          border-radius: 30px;\n          height: 500px;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n\n        .phone-title {\n          font-family: Arial, sans-serif;\n          font-size: 24px;\n          font-weight: bold;\n          color: #fff;\n          margin-bottom: 20px;\n        }\n\n        .phone-content {\n          text-align: center;\n          color: #fff;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n};\n_s(Assistant, \"I62l07oGmc4mNNS0LCwoFi1kY1U=\", false, function () {\n  return [useHistory, useSpeechSynthesis];\n});\n_c = Assistant;\nexport default Assistant;\nvar _c;\n$RefreshReg$(_c, \"Assistant\");","map":{"version":3,"names":["React","useHistory","useSpeechSynthesis","jsxDEV","_jsxDEV","Assistant","_s","history","speak","handleStartListening","console","log","handleStopListening","handleVoiceCommand","command","x","toLowerCase","text","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","jsx","_c","$RefreshReg$"],"sources":["D:/PROJECTS/ScanVue/client/src/components/assistant.jsx"],"sourcesContent":["// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n\n////////////////////////////////////////////////////////////////////////////\n\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const { transcript: t1 } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"Hi\");\n//       },\n//     },\n//   ];\n//\n//   return (\n//     <div style={{ textAlign: \"center\", fontFamily: \"Arial\" }}>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//             textShadow: \"2px 2px 4px rgba(0, 0, 0, 0.5)\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button className=\"btn btn-primary\" onClick={handleStartListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button className=\"btn btn-danger\" onClick={handleStopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n\n\n\n\n\n\n//\n// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const { transcript: t1 } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"Hi\");\n//       },\n//     },\n//   ];\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Assistant</div>\n//           <div className=\"phone-content\">\n//             <h3>Say \"Hey Jarvis\"</h3>\n//             <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//             <button className=\"btn btn-primary\" onClick={handleStartListening}>\n//               Start listening\n//             </button>\n//             <button className=\"btn btn-danger\" onClick={handleStopListening}>\n//               Stop listening\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           width: 300px;\n//         }\n//\n//         .phone-screen {\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           color: #fff;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//           color: #fff;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n\n\n\n\n\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst Assistant = () => {\n  const history = useHistory();\n  const { speak } = useSpeechSynthesis();\n\n  const handleStartListening = () => {\n    // Add your code to start listening for speech here\n    console.log(\"Listening started\");\n  };\n\n  const handleStopListening = () => {\n    // Add your code to stop listening for speech here\n    console.log(\"Listening stopped\");\n  };\n\n  const handleVoiceCommand = (command) => {\n    const x = `Redirect to: ${command}`;\n    console.log(x);\n    switch (command.toLowerCase()) {\n      case \"object detection\":\n        speak({ text: x });\n        history.push(`/object-detection`);\n        break;\n      case \"face recognition\":\n        speak({ text: x });\n        history.push(`/face-recognition`);\n        break;\n      case \"image to text\":\n        speak({ text: x });\n        history.push(`/image-to-text`);\n        break;\n      case \"text to speech\":\n        speak({ text: x });\n        history.push(`/text-to-speech`);\n        break;\n      case \"speech to text\":\n        speak({ text: x });\n        history.push(`/speech-to-text`);\n        break;\n      case \"home\":\n        speak({ text: x });\n        history.push(`/`);\n        break;\n      case \"hey jarvis\":\n        speak({ text: \"Hi Sir\" });\n        console.log(\"Hi\");\n        break;\n      default:\n        speak({ text: \"I don't understand, please try again!\" });\n        break;\n    }\n  };\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"phone-title\">Assistant</div>\n          <div className=\"phone-content\">\n            <h3>Say \"Hey Jarvis\"</h3>\n            <p>Start listening for transcript</p>\n            <button className=\"btn btn-primary\" onClick={handleStartListening}>\n              Start listening\n            </button>\n            <button className=\"btn btn-danger\" onClick={handleStopListening}>\n              Stop listening\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n        }\n\n        .phone {\n          background-color: #000;\n          border-radius: 40px;\n          overflow: hidden;\n          width: 300px;\n        }\n\n        .phone-screen {\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          border-radius: 30px;\n          height: 500px;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n\n        .phone-title {\n          font-family: Arial, sans-serif;\n          font-size: 24px;\n          font-weight: bold;\n          color: #fff;\n          margin-bottom: 20px;\n        }\n\n        .phone-content {\n          text-align: center;\n          color: #fff;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Assistant;\n"],"mappingszB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAM;IAAEO;EAAM,CAAC,GAAGN,kBAAkB,CAAC,CAAC;EAEtC,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAClC,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACAF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAClC,CAAC;EAED,MAAME,kBAAkB,GAAIC,OAAO,IAAK;IACtC,MAAMC,CAAC,GAAI,gBAAeD,OAAQ,EAAC;IACnCJ,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC;IACd,QAAQD,OAAO,CAACE,WAAW,CAAC,CAAC;MAC3B,KAAK,kBAAkB;QACrBR,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,mBAAkB,CAAC;QACjC;MACF,KAAK,kBAAkB;QACrBV,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,mBAAkB,CAAC;QACjC;MACF,KAAK,eAAe;QAClBV,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,gBAAe,CAAC;QAC9B;MACF,KAAK,gBAAgB;QACnBV,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,iBAAgB,CAAC;QAC/B;MACF,KAAK,gBAAgB;QACnBV,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,iBAAgB,CAAC;QAC/B;MACF,KAAK,MAAM;QACTV,KAAK,CAAC;UAAES,IAAI,EAAEF;QAAE,CAAC,CAAC;QAClBR,OAAO,CAACW,IAAI,CAAE,GAAE,CAAC;QACjB;MACF,KAAK,YAAY;QACfV,KAAK,CAAC;UAAES,IAAI,EAAE;QAAS,CAAC,CAAC;QACzBP,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;QACjB;MACF;QACEH,KAAK,CAAC;UAAES,IAAI,EAAE;QAAwC,CAAC,CAAC;QACxD;IACJ;EACF,CAAC;EAED,oBACEb,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhB,OAAA;MAAKe,SAAS,EAAC,OAAO;MAAAC,QAAA,eACpBhB,OAAA;QAAKe,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BhB,OAAA;UAAKe,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5CpB,OAAA;UAAKe,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BhB,OAAA;YAAAgB,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBpB,OAAA;YAAAgB,QAAA,EAAG;UAA8B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACrCpB,OAAA;YAAQe,SAAS,EAAC,iBAAiB;YAACM,OAAO,EAAEhB,oBAAqB;YAAAW,QAAA,EAAC;UAEnE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTpB,OAAA;YAAQe,SAAS,EAAC,gBAAgB;YAACM,OAAO,EAAEb,mBAAoB;YAAAQ,QAAA,EAAC;UAEjE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpB,OAAA;MAAOsB,GAAG;MAAAN,QAAA,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAClB,EAAA,CApHID,SAAS;EAAA,QACGJ,UAAU,EACRC,kBAAkB;AAAA;AAAAyB,EAAA,GAFhCtB,SAAS;AAsHf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}