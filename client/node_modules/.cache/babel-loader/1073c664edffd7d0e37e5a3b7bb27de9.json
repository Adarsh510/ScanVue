{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\ScanVue\\\\client\\\\src\\\\components\\\\imageToText.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   // speak({ text: \"hi\" });\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Image To Text\n//         </h1>\n//       </div>\n//       <FileUpload\n//         setImageInputUrl={setImageInputUrl}\n//         setImageOutputUrl={setImageOutputUrl}\n//         setText={setText}\n//         speak={speakOutput}\n//         url={\"http://localhost:5000/image-to-text\"}\n//       />\n//       <div className=\"container border my-5\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           {imageInputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Input Image</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageInputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//           {imageOutputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Result</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageOutputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {text && (\n//           <div\n//             className=\"row\"\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\n//           >\n//             <hr />\n//             <h1>\n//               Image Contains:\n//               {speaking ? (\n//                 <button\n//                   className=\"btn btn-secondary m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={cancel}\n//                 >\n//                   Stop\n//                 </button>\n//               ) : (\n//                 <button\n//                   className=\"btn btn-success m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={() => speak({ text })}\n//                 >\n//                   Speak\n//                 </button>\n//               )}\n//             </h1>\n//             <hr />\n//             <div\n//               className=\"p-5 m-5\"\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\n//             >\n//               <h5>{text}</h5>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default ImageToText;\n\n////////////////////////////////////////////////////\n\n// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\" style={{ width: \"85%\" }}> {/* Increase width by 25% */}\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Image To Text</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <FileUpload\n//                   setImageInputUrl={setImageInputUrl}\n//                   setImageOutputUrl={setImageOutputUrl}\n//                   setText={setText}\n//                   speak={speakOutput}\n//                   url={\"http://localhost:5000/image-to-text\"}\n//                 />\n//                 {imageInputURL && (\n//                   <div className=\"input-image\">\n//                     <h3>Input Image</h3>\n//                     <img src={imageInputURL} alt=\"Input\" />\n//                   </div>\n//                 )}\n//                 {imageOutputURL && (\n//                   <div className=\"output-image\">\n//                     <h3>Result</h3>\n//                     <img src={imageOutputURL} alt=\"Output\" />\n//                   </div>\n//                 )}\n//                 {text && (\n//                   <div className=\"result\">\n//                     <h3>Image Contains:</h3>\n//                     <div className=\"text-area\">\n//                       <div className=\"text\">{text}</div>\n//                       {speaking ? (\n//                         <button className=\"stop-button\" onClick={cancel}>\n//                           Stop\n//                         </button>\n//                       ) : (\n//                         <button className=\"speak-button\" onClick={() => speak({ text })}>\n//                           Speak\n//                         </button>\n//                       )}\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 85%; /* Increase width by 25% */\n//           height: 90%; /* Adjust as needed */\n//           max-width: 750px; /* Set maximum width */\n//           max-height: 800px; /* Set maximum height */\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .input-image,\n//         .output-image {\n//           margin-top: 20px;\n//           text-align: center;\n//         }\n//         .input-image img,\n//         .output-image img {\n//           width: 100%;\n//           border: 4px solid #d2d2d2;\n//           border-radius: 5px;\n//         }\n//         .result {\n//           margin-top: 30px;\n//           border-top: 2px solid gray;\n//           padding-top: 20px;\n//         }\n//         .text-area {\n//           display: flex;\n//           align-items: center;\n//           justify-content: space-between;\n//           margin-top: 20px;\n//         }\n//         .text {\n//           background: rgba(235, 255, 251, 0.8);\n//           width: 85%;\n//           padding: 20px;\n//           border-radius: 5px;\n//         }\n//         .speak-button,\n//         .stop-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .stop-button {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default ImageToText;\n\n//////////////////////////////////////////////////////\n\nimport React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageToText = () => {\n  _s();\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const {\n    speak,\n    cancel,\n    speaking\n  } = useSpeechSynthesis();\n  const speakOutput = text => {\n    speak({\n      text: `This Image contains: ${text}`\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone\",\n      style: {\n        width: \"85%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phone-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"assistant-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"assistant-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-title\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Image To Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-body\",\n              children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n                setImageInputUrl: setImageInputUrl,\n                setImageOutputUrl: setImageOutputUrl,\n                setText: setText,\n                speak: speakOutput,\n                url: \"http://localhost:5000/image-to-text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"image-container\",\n                children: [imageInputURL && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"input-image\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Input Image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: imageInputURL,\n                    alt: \"Input\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 325,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this), imageOutputURL && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"output-image\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \"Result\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: imageOutputURL,\n                    alt: \"Output\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 17\n              }, this), text && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Transcription:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-area\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text\",\n                    children: text\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 23\n                  }, this), speaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"stop-button\",\n                    onClick: cancel,\n                    children: \"Stop\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 341,\n                    columnNumber: 25\n                  }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"speak-button\",\n                    onClick: () => speak({\n                      text\n                    }),\n                    children: \"Speak\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        /* Styles go here */\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%;\n          height: 90%;\n          max-width: 750px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .image-container {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n        }\n        .input-image,\n        .output-image {\n          flex: 1;\n          text-align: center;\n        }\n        .input-image img,\n        .output-image img {\n          width: 100%;\n          border: 4px solid #d2d2d2;\n          border-radius: 5px;\n        }\n        .result {\n          margin-top: 30px;\n          border-top: 2px solid gray;\n          padding-top: 20px;\n        }\n        .text-area {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-top: 20px;\n        }\n        .text {\n          background: rgba(235, 255, 251, 0.8);\n          width: 85%;\n          padding: 20px;\n          border-radius: 5px;\n        }\n        .speak-button,\n        .stop-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .stop-button {\n          background-color: #f44336;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageToText, \"EZ2PtYXhksNCEKCm+7bXkHOdUpQ=\", false, function () {\n  return [useSpeechSynthesis];\n});\n_c = ImageToText;\nexport default ImageToText;\nvar _c;\n$RefreshReg$(_c, \"ImageToText\");","map":{"version":3,"names":["React","useState","FileUpload","useSpeechSynthesis","jsxDEV","_jsxDEV","ImageToText","_s","imageInputURL","setImageInputUrl","imageOutputURL","setImageOutputUrl","text","setText","speak","cancel","speaking","speakOutput","className","children","style","width","fileName","_jsxFileName","lineNumber","columnNumber","url","src","alt","onClick","jsx","_c","$RefreshReg$"],"sources":["D:/PROJECTS/ScanVue/client/src/components/imageToText.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   // speak({ text: \"hi\" });\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Image To Text\n//         </h1>\n//       </div>\n//       <FileUpload\n//         setImageInputUrl={setImageInputUrl}\n//         setImageOutputUrl={setImageOutputUrl}\n//         setText={setText}\n//         speak={speakOutput}\n//         url={\"http://localhost:5000/image-to-text\"}\n//       />\n//       <div className=\"container border my-5\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           {imageInputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Input Image</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageInputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//           {imageOutputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Result</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageOutputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {text && (\n//           <div\n//             className=\"row\"\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\n//           >\n//             <hr />\n//             <h1>\n//               Image Contains:\n//               {speaking ? (\n//                 <button\n//                   className=\"btn btn-secondary m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={cancel}\n//                 >\n//                   Stop\n//                 </button>\n//               ) : (\n//                 <button\n//                   className=\"btn btn-success m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={() => speak({ text })}\n//                 >\n//                   Speak\n//                 </button>\n//               )}\n//             </h1>\n//             <hr />\n//             <div\n//               className=\"p-5 m-5\"\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\n//             >\n//               <h5>{text}</h5>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default ImageToText;\n\n\n\n////////////////////////////////////////////////////\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\" style={{ width: \"85%\" }}> {/* Increase width by 25% */}\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Image To Text</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <FileUpload\n//                   setImageInputUrl={setImageInputUrl}\n//                   setImageOutputUrl={setImageOutputUrl}\n//                   setText={setText}\n//                   speak={speakOutput}\n//                   url={\"http://localhost:5000/image-to-text\"}\n//                 />\n//                 {imageInputURL && (\n//                   <div className=\"input-image\">\n//                     <h3>Input Image</h3>\n//                     <img src={imageInputURL} alt=\"Input\" />\n//                   </div>\n//                 )}\n//                 {imageOutputURL && (\n//                   <div className=\"output-image\">\n//                     <h3>Result</h3>\n//                     <img src={imageOutputURL} alt=\"Output\" />\n//                   </div>\n//                 )}\n//                 {text && (\n//                   <div className=\"result\">\n//                     <h3>Image Contains:</h3>\n//                     <div className=\"text-area\">\n//                       <div className=\"text\">{text}</div>\n//                       {speaking ? (\n//                         <button className=\"stop-button\" onClick={cancel}>\n//                           Stop\n//                         </button>\n//                       ) : (\n//                         <button className=\"speak-button\" onClick={() => speak({ text })}>\n//                           Speak\n//                         </button>\n//                       )}\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 85%; /* Increase width by 25% */\n//           height: 90%; /* Adjust as needed */\n//           max-width: 750px; /* Set maximum width */\n//           max-height: 800px; /* Set maximum height */\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .input-image,\n//         .output-image {\n//           margin-top: 20px;\n//           text-align: center;\n//         }\n//         .input-image img,\n//         .output-image img {\n//           width: 100%;\n//           border: 4px solid #d2d2d2;\n//           border-radius: 5px;\n//         }\n//         .result {\n//           margin-top: 30px;\n//           border-top: 2px solid gray;\n//           padding-top: 20px;\n//         }\n//         .text-area {\n//           display: flex;\n//           align-items: center;\n//           justify-content: space-between;\n//           margin-top: 20px;\n//         }\n//         .text {\n//           background: rgba(235, 255, 251, 0.8);\n//           width: 85%;\n//           padding: 20px;\n//           border-radius: 5px;\n//         }\n//         .speak-button,\n//         .stop-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .stop-button {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default ImageToText;\n\n\n\n\n\n//////////////////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\nimport React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst ImageToText = () => {\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const { speak, cancel, speaking } = useSpeechSynthesis();\n\n  const speakOutput = (text) => {\n    speak({ text: `This Image contains: ${text}` });\n  };\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\" style={{ width: \"85%\" }}>\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Image To Text</h1>\n              </div>\n              <div className=\"assistant-body\">\n                <FileUpload\n                  setImageInputUrl={setImageInputUrl}\n                  setImageOutputUrl={setImageOutputUrl}\n                  setText={setText}\n                  speak={speakOutput}\n                  url={\"http://localhost:5000/image-to-text\"}\n                />\n                <div className=\"image-container\">\n                  {imageInputURL && (\n                    <div className=\"input-image\">\n                      <h3>Input Image</h3>\n                      <img src={imageInputURL} alt=\"Input\" />\n                    </div>\n                  )}\n                  {imageOutputURL && (\n                    <div className=\"output-image\">\n                      <h3>Result</h3>\n                      <img src={imageOutputURL} alt=\"Output\" />\n                    </div>\n                  )}\n                </div>\n                {text && (\n                  <div className=\"result\">\n                    <h3>Transcription:</h3>\n                    <div className=\"text-area\">\n                      <div className=\"text\">{text}</div>\n                      {speaking ? (\n                        <button className=\"stop-button\" onClick={cancel}>\n                          Stop\n                        </button>\n                      ) : (\n                        <button className=\"speak-button\" onClick={() => speak({ text })}>\n                          Speak\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        /* Styles go here */\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%;\n          height: 90%;\n          max-width: 750px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .image-container {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n        }\n        .input-image,\n        .output-image {\n          flex: 1;\n          text-align: center;\n        }\n        .input-image img,\n        .output-image img {\n          width: 100%;\n          border: 4px solid #d2d2d2;\n          border-radius: 5px;\n        }\n        .result {\n          margin-top: 30px;\n          border-top: 2px solid gray;\n          padding-top: 20px;\n        }\n        .text-area {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-top: 20px;\n        }\n        .text {\n          background: rgba(235, 255, 251, 0.8);\n          width: 85%;\n          padding: 20px;\n          border-radius: 5px;\n        }\n        .speak-button,\n        .stop-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .stop-button {\n          background-color: #f44336;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ImageToText;\n\n\n"],"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"},"metadata":{},"sourceType":"module"}