{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n/////////////////////////////////////////////\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n//////////////////////////////////////////////////////////////\nimport React,{useState}from\"react\";import{useSpeechSynthesis}from\"react-speech-kit\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const TextToSpeech=()=>{const[text,setText]=useState(\"\");const[pitch,setPitch]=useState(1);const[rate,setRate]=useState(1);const[voiceIndex,setVoiceIndex]=useState(null);const onEnd=()=>{// You could do something here after speaking has finished\n};const{speak,cancel,speaking,supported,voices}=useSpeechSynthesis({onEnd});const voice=voices[voiceIndex]||null;return/*#__PURE__*/_jsxs(\"div\",{className:\"phone-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"phone\",children:/*#__PURE__*/_jsx(\"div\",{className:\"phone-screen\",children:/*#__PURE__*/_jsx(\"div\",{className:\"assistant-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"assistant-title\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Text to Speech\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-body\",children:[!supported&&/*#__PURE__*/_jsx(\"p\",{children:\"Oh no, it looks like your browser doesn't support Speech Synthesis.\"}),supported&&/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"settings-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"voice-select\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"voice\",children:\"Voice:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"voice\",name:\"voice\",value:voiceIndex||\"\",onChange:event=>{setVoiceIndex(event.target.value);},style:{maxWidth:\"100%\"},children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Default\"}),voices.map((option,index)=>/*#__PURE__*/_jsx(\"option\",{value:index,children:\"\".concat(option.lang,\" - \").concat(option.name)},option.voiceURI))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"rate-pitch-sliders\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"rate-slider\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"rate\",children:\"Rate:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"0.5\",max:\"2\",step:\"0.1\",value:rate,onChange:event=>setRate(event.target.value)}),/*#__PURE__*/_jsx(\"span\",{children:rate})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitch-slider\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"pitch\",children:\"Pitch:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"0\",max:\"2\",step:\"0.1\",value:pitch,onChange:event=>setPitch(event.target.value)}),/*#__PURE__*/_jsx(\"span\",{children:pitch})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-area\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"message\",children:\"Message:\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"message\",name:\"message\",placeholder:\"Please type the message you want to speak out.\",value:text,onChange:event=>setText(event.target.value)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"speak-button \".concat(speaking?\"speaking\":\"\"),onClick:speaking?cancel:()=>speak({text,voice,rate,pitch}),children:speaking?\"Stop\":\"Speak\"})})]})]})]})})})}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:\"\\n        .phone-container {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          height: 100vh; /* Adjust the height to match FaceRecognition */\\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\\n        }\\n        .phone {\\n          width: 85%; /* Adjust the width to match FaceRecognition */\\n          height: 95%; /* Adjust the height to match FaceRecognition */\\n          max-width: 750px; /* Set maximum width */\\n          max-height: 800px; /* Set maximum height */\\n          background: #333;\\n          border-radius: 20px;\\n          overflow: hidden;\\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\\n        }\\n        .phone-screen {\\n          width: 100%;\\n          height: 100%;\\n          background: #fff;\\n          padding: 20px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n        }\\n        .assistant-container {\\n          width: 100%;\\n          max-width: 400px;\\n        }\\n        .assistant-content {\\n          text-align: center;\\n        }\\n        .assistant-title {\\n          font-size: 28px;\\n          margin-bottom: 20px;\\n        }\\n        .title {\\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\\n        }\\n        .settings-container {\\n          margin-bottom: 20px;\\n        }\\n        .voice-select {\\n          margin-bottom: 10px;\\n        }\\n        .rate-pitch-sliders {\\n          display: flex;\\n          justify-content: space-between;\\n          align-items: center;\\n          margin-bottom: 20px;\\n        }\\n        .rate-slider,\\n        .pitch-slider {\\n          width: 45%;\\n        }\\n        .rate-slider span,\\n        .pitch-slider span {\\n          margin-left: 10px;\\n        }\\n        .text-area {\\n          margin-bottom: 20px;\\n        }\\n        .text-area textarea {\\n          width: 100%;\\n          height: 100px;\\n          resize: none;\\n          padding: 10px;\\n          font-size: 16px;\\n          border-radius: 5px;\\n          border: 1px solid #ccc;\\n        }\\n        .button-container {\\n          display: flex;\\n          justify-content: center;\\n        }\\n        .speak-button {\\n          padding: 10px 20px;\\n          font-size: 16px;\\n          border: none;\\n          border-radius: 5px;\\n          cursor: pointer;\\n          transition: background-color 0.3s ease;\\n        }\\n        .speak-button:hover {\\n          background-color: #4caf50;\\n        }\\n        .speak-button.speaking {\\n          background-color: #f44336;\\n        }\\n      \"})]});};export default TextToSpeech;","map":{"version":3,"names":["React","useState","useSpeechSynthesis","jsx","_jsx","jsxs","_jsxs","TextToSpeech","text","setText","pitch","setPitch","rate","setRate","voiceIndex","setVoiceIndex","onEnd","speak","cancel","speaking","supported","voices","voice","className","children","Fragment","htmlFor","id","name","value","onChange","event","target","style","maxWidth","map","option","index","concat","lang","voiceURI","type","min","max","step","placeholder","onClick"],"sources":["C:/Users/CYPHER/Documents/GitHub/ScanVue/client/src/components/textToSpeech.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n\n/////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n//////////////////////////////////////////////////////////////\n\n\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst TextToSpeech = () => {\n  const [text, setText] = useState(\"\");\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const onEnd = () => {\n    // You could do something here after speaking has finished\n  };\n  const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n    onEnd,\n  });\n\n  const voice = voices[voiceIndex] || null;\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1 className=\"title\">Text to Speech</h1>\n              </div>\n              <div className=\"assistant-body\">\n                {!supported && (\n                  <p>\n                    Oh no, it looks like your browser doesn&#39;t support\n                    Speech Synthesis.\n                  </p>\n                )}\n                {supported && (\n                  <React.Fragment>\n                    <div className=\"settings-container\">\n                      <div className=\"voice-select\">\n                        <label htmlFor=\"voice\">Voice:</label>\n                        <select\n                          id=\"voice\"\n                          name=\"voice\"\n                          value={voiceIndex || \"\"}\n                          onChange={(event) => {\n                            setVoiceIndex(event.target.value);\n                          }}\n                          style={{ maxWidth: \"100%\" }}\n                        >\n                          <option value=\"\">Default</option>\n                          {voices.map((option, index) => (\n                            <option key={option.voiceURI} value={index}>\n                              {`${option.lang} - ${option.name}`}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      <div className=\"rate-pitch-sliders\">\n                        <div className=\"rate-slider\">\n                          <label htmlFor=\"rate\">Rate:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0.5\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={rate}\n                            onChange={(event) => setRate(event.target.value)}\n                          />\n                          <span>{rate}</span>\n                        </div>\n                        <div className=\"pitch-slider\">\n                          <label htmlFor=\"pitch\">Pitch:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={pitch}\n                            onChange={(event) => setPitch(event.target.value)}\n                          />\n                          <span>{pitch}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-area\">\n                      <label htmlFor=\"message\">Message:</label>\n                      <textarea\n                        id=\"message\"\n                        name=\"message\"\n                        placeholder=\"Please type the message you want to speak out.\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <button\n                        className={`speak-button ${\n                          speaking ? \"speaking\" : \"\"\n                        }`}\n                        onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n                      >\n                        {speaking ? \"Stop\" : \"Speak\"}\n                      </button>\n                    </div>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .title {\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n        .settings-container {\n          margin-bottom: 20px;\n        }\n        .voice-select {\n          margin-bottom: 10px;\n        }\n        .rate-pitch-sliders {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 20px;\n        }\n        .rate-slider,\n        .pitch-slider {\n          width: 45%;\n        }\n        .rate-slider span,\n        .pitch-slider span {\n          margin-left: 10px;\n        }\n        .text-area {\n          margin-bottom: 20px;\n        }\n        .text-area textarea {\n          width: 100%;\n          height: 100px;\n          resize: none;\n          padding: 10px;\n          font-size: 16px;\n          border-radius: 5px;\n          border: 1px solid #ccc;\n        }\n        .button-container {\n          display: flex;\n          justify-content: center;\n        }\n        .speak-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .speak-button.speaking {\n          background-color: #f44336;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TextToSpeech;\n\n\n"],"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"},"metadata":{},"sourceType":"module"}