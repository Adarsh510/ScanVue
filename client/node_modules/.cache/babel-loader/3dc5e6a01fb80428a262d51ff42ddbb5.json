{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\ScanVue\\\\client\\\\src\\\\components\\\\textToSpeech.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n/////////////////////////////////////////////\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n//////////////////////////////////////////////////////////////\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSpeech = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const onEnd = () => {\n    // You could do something here after speaking has finished\n  };\n  const {\n    speak,\n    cancel,\n    speaking,\n    supported,\n    voices\n  } = useSpeechSynthesis({\n    onEnd\n  });\n  const voice = voices[voiceIndex] || null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phone-screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"assistant-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"assistant-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-title\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"title\",\n                children: \"Text to Speech\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-body\",\n              children: [!supported && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Oh no, it looks like your browser doesn't support Speech Synthesis.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this), supported && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"settings-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"voice-select\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: \"voice\",\n                      children: \"Voice:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      id: \"voice\",\n                      name: \"voice\",\n                      value: voiceIndex || \"\",\n                      onChange: event => {\n                        setVoiceIndex(event.target.value);\n                      },\n                      style: {\n                        maxWidth: \"100%\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"\",\n                        children: \"Default\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 429,\n                        columnNumber: 27\n                      }, this), voices.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: index,\n                        children: `${option.lang} - ${option.name}`\n                      }, option.voiceURI, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 431,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"rate-pitch-sliders\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"rate-slider\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"rate\",\n                        children: \"Rate:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 439,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"range\",\n                        min: \"0.5\",\n                        max: \"2\",\n                        step: \"0.1\",\n                        value: rate,\n                        onChange: event => setRate(event.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 440,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: rate\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 438,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"pitch-slider\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"pitch\",\n                        children: \"Pitch:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 451,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"range\",\n                        min: \"0\",\n                        max: \"2\",\n                        step: \"0.1\",\n                        value: pitch,\n                        onChange: event => setPitch(event.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 452,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: pitch\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 460,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 450,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-area\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"message\",\n                    children: \"Message:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    id: \"message\",\n                    name: \"message\",\n                    placeholder: \"Please type the message you want to speak out.\",\n                    value: text,\n                    onChange: event => setText(event.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"button-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `speak-button ${speaking ? \"speaking\" : \"\"}`,\n                    onClick: speaking ? cancel : () => speak({\n                      text,\n                      voice,\n                      rate,\n                      pitch\n                    }),\n                    children: speaking ? \"Stop\" : \"Speak\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 475,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .title {\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n        .settings-container {\n          margin-bottom: 20px;\n        }\n        .voice-select {\n          margin-bottom: 10px;\n        }\n        .rate-pitch-sliders {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 20px;\n        }\n        .rate-slider,\n        .pitch-slider {\n          width: 45%;\n        }\n        .rate-slider span,\n        .pitch-slider span {\n          margin-left: 10px;\n        }\n        .text-area {\n          margin-bottom: 20px;\n        }\n        .text-area textarea {\n          width: 100%;\n          height: 100px;\n          resize: none;\n          padding: 10px;\n          font-size: 16px;\n          border-radius: 5px;\n          border: 1px solid #ccc;\n        }\n        .button-container {\n          display: flex;\n          justify-content: center;\n        }\n        .speak-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .speak-button.speaking {\n          background-color: #f44336;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"5IttgKj/ionrc1bdDeRXg/LBnu8=\", false, function () {\n  return [useSpeechSynthesis];\n});\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["React","useState","useSpeechSynthesis","jsxDEV","_jsxDEV","TextToSpeech","_s","text","setText","pitch","setPitch","rate","setRate","voiceIndex","setVoiceIndex","onEnd","speak","cancel","speaking","supported","voices","voice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","htmlFor","id","name","value","onChange","event","target","style","maxWidth","map","option","index","lang","voiceURI","type","min","max","step","placeholder","onClick","jsx","_c","$RefreshReg$"],"sources":["D:/PROJECTS/ScanVue/client/src/components/textToSpeech.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n\n/////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n//////////////////////////////////////////////////////////////\n\n\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst TextToSpeech = () => {\n  const [text, setText] = useState(\"\");\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const onEnd = () => {\n    // You could do something here after speaking has finished\n  };\n  const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n    onEnd,\n  });\n\n  const voice = voices[voiceIndex] || null;\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1 className=\"title\">Text to Speech</h1>\n              </div>\n              <div className=\"assistant-body\">\n                {!supported && (\n                  <p>\n                    Oh no, it looks like your browser doesn&#39;t support\n                    Speech Synthesis.\n                  </p>\n                )}\n                {supported && (\n                  <React.Fragment>\n                    <div className=\"settings-container\">\n                      <div className=\"voice-select\">\n                        <label htmlFor=\"voice\">Voice:</label>\n                        <select\n                          id=\"voice\"\n                          name=\"voice\"\n                          value={voiceIndex || \"\"}\n                          onChange={(event) => {\n                            setVoiceIndex(event.target.value);\n                          }}\n                          style={{ maxWidth: \"100%\" }}\n                        >\n                          <option value=\"\">Default</option>\n                          {voices.map((option, index) => (\n                            <option key={option.voiceURI} value={index}>\n                              {`${option.lang} - ${option.name}`}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      <div className=\"rate-pitch-sliders\">\n                        <div className=\"rate-slider\">\n                          <label htmlFor=\"rate\">Rate:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0.5\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={rate}\n                            onChange={(event) => setRate(event.target.value)}\n                          />\n                          <span>{rate}</span>\n                        </div>\n                        <div className=\"pitch-slider\">\n                          <label htmlFor=\"pitch\">Pitch:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={pitch}\n                            onChange={(event) => setPitch(event.target.value)}\n                          />\n                          <span>{pitch}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-area\">\n                      <label htmlFor=\"message\">Message:</label>\n                      <textarea\n                        id=\"message\"\n                        name=\"message\"\n                        placeholder=\"Please type the message you want to speak out.\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <button\n                        className={`speak-button ${\n                          speaking ? \"speaking\" : \"\"\n                        }`}\n                        onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n                      >\n                        {speaking ? \"Stop\" : \"Speak\"}\n                      </button>\n                    </div>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .title {\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n        .settings-container {\n          margin-bottom: 20px;\n        }\n        .voice-select {\n          margin-bottom: 10px;\n        }\n        .rate-pitch-sliders {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 20px;\n        }\n        .rate-slider,\n        .pitch-slider {\n          width: 45%;\n        }\n        .rate-slider span,\n        .pitch-slider span {\n          margin-left: 10px;\n        }\n        .text-area {\n          margin-bottom: 20px;\n        }\n        .text-area textarea {\n          width: 100%;\n          height: 100px;\n          resize: none;\n          padding: 10px;\n          font-size: 16px;\n          border-radius: 5px;\n          border: 1px solid #ccc;\n        }\n        .button-container {\n          display: flex;\n          justify-content: center;\n        }\n        .speak-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .speak-button.speaking {\n          background-color: #f44336;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TextToSpeech;\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMc,KAAK,GAAGA,CAAA,KAAM;IAClB;EAAA,CACD;EACD,MAAM;IAAEC,KAAK;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAO,CAAC,GAAGlB,kBAAkB,CAAC;IACxEa;EACF,CAAC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"},"metadata":{},"sourceType":"module"}