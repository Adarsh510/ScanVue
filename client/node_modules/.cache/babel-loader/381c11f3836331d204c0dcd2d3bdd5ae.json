{"ast":null,"code":"// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const FaceRecognition = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const [map, setMap] = useState({});\n//   const { speak, cancel } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     var M = {};\n//     for (var i = 0; i < text.length; i++) {\n//       if (!M[text[i]]) M[text[i]] = 1;\n//       else M[text[i]] = M[text[i]] + 1;\n//     }\n//     var xx = \"\";\n//     for (let i = 0; i < Object.keys(M).length; i++) {\n//       if (M[Object.keys(M)[i]])\n//         xx = xx + M[Object.keys(M)[i]] + \" \" + Object.keys(M)[i] + \", \";\n//     }\n//\n//     setMap(M);\n//\n//     console.log(xx);\n//     speak({ text: `This Image contains: ${xx}` });\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           FaceRecognition\n//         </h1>\n//       </div>\n//       <FileUpload\n//         setImageInputUrl={setImageInputUrl}\n//         setImageOutputUrl={setImageOutputUrl}\n//         setText={setText}\n//         speak={speakOutput}\n//         url={\"http://localhost:5000//face-recognition\"}\n//       />\n//       <div className=\"container border my-5\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           {imageInputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Input Image</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageInputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//           {imageOutputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Result</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageOutputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {text && (\n//           <div\n//             className=\"row\"\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\n//           >\n//             <hr />\n//             <h1>Image Contains:</h1>\n//             <hr />\n//             <div\n//               className=\"p-5 m-5\"\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\n//             >\n//               {Object.keys(map).map((key) => (\n//                 <h5 key={key}>{`${key}: ${map[key]}`}</h5>\n//               ))}\n//             </div>\n//             <button\n//               className=\"btn btn-success m-2 p-2\"\n//               type=\"button\"\n//               onClick={() => speak({ text: `This Image contains: ${text}` })}\n//             >\n//               Speak\n//             </button>\n//             <button\n//               className=\"btn btn-secondary m-2 p-2\"\n//               type=\"button\"\n//               onClick={cancel}\n//             >\n//               Stop\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default FaceRecognition;\n/////////////////////////////////////////////////////////////\nimport React,{useState}from\"react\";import FileUpload from\"./FileUpload\";import{useSpeechSynthesis}from\"react-speech-kit\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const FaceRecognition=()=>{const[imageInputURL,setImageInputUrl]=useState(\"\");const[imageOutputURL,setImageOutputUrl]=useState(\"\");const[text,setText]=useState(\"\");const[map,setMap]=useState({});const{speak,cancel}=useSpeechSynthesis();const speakOutput=text=>{const M={};for(let i=0;i<text.length;i++){if(!M[text[i]])M[text[i]]=1;else M[text[i]]=M[text[i]]+1;}let names=Object.keys(M);if(names.length===0){speak({text:\"No faces detected\"});return;}let nameList=names.join(\", \");setMap(M);speak({text:\"This Image contains: \".concat(nameList)});};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"phone-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"phone\",style:{width:\"85%\",height:\"95%\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"phone-screen\",children:/*#__PURE__*/_jsx(\"div\",{className:\"assistant-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"assistant-title\",children:/*#__PURE__*/_jsx(\"h1\",{style:{textShadow:\"1px 1px 2px #000\",color:\"#003366\"},children:\"Face Recognition\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"assistant-body\",children:[/*#__PURE__*/_jsx(FileUpload,{setImageInputUrl:setImageInputUrl,setImageOutputUrl:setImageOutputUrl,setText:setText,speak:speakOutput,url:\"http://localhost:5000/face-recognition\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"image-container\",children:[imageInputURL&&/*#__PURE__*/_jsxs(\"div\",{className:\"input-image\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Input Image\"}),/*#__PURE__*/_jsx(\"img\",{src:imageInputURL,alt:\"Input\"})]}),imageOutputURL&&/*#__PURE__*/_jsxs(\"div\",{className:\"output-image\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Result\"}),/*#__PURE__*/_jsx(\"img\",{src:imageOutputURL,alt:\"Output\"})]})]}),text&&/*#__PURE__*/_jsxs(\"div\",{className:\"result\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Face Identification:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-area\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"speak-button\",onClick:()=>speakOutput(text),children:\"Speak\"}),/*#__PURE__*/_jsx(\"button\",{className:\"stop-button\",onClick:cancel,children:\"Stop\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text\",children:/*#__PURE__*/_jsx(\"ul\",{className:\"transcription-list\",children:Object.keys(map).sort().map(key=>/*#__PURE__*/_jsx(\"li\",{children:key},key))})})]})]})]})]})})})})}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:\"\\n        /* Styles go here */\\n        .phone-container {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          height: 100vh;\\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\\n        }\\n        .phone {\\n          width: 85%;\\n          height: 95%;\\n          max-width: 750px;\\n          background: #333;\\n          border-radius: 20px;\\n          overflow: hidden;\\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\\n          display: flex;\\n          flex-direction: column;\\n        }\\n        .phone-screen {\\n          flex: 1;\\n          width: 100%;\\n          height: 100%;\\n          background: #fff;\\n          padding: 20px;\\n          display: flex;\\n          flex-direction: column;\\n          justify-content: center;\\n          align-items: center;\\n          overflow-y: auto;\\n        }\\n        .assistant-container {\\n          width: 100%;\\n          max-width: 400px;\\n        }\\n        .assistant-content {\\n          text-align: center;\\n        }\\n        .assistant-title {\\n          font-size: 28px;\\n          margin-bottom: 20px;\\n        }\\n        .assistant-body {\\n          margin-top: 20px;\\n        }\\n        .image-container {\\n          display: flex;\\n          justify-content: space-between;\\n          margin-bottom: 20px;\\n        }\\n        .input-image,\\n        .output-image {\\n          flex: 1;\\n          text-align: center;\\n        }\\n        .input-image img,\\n        .output-image img {\\n          width: 100%;\\n          border: 4px solid #d2d2d2;\\n          border-radius: 5px;\\n        }\\n        .result {\\n          margin-top: 30px;\\n          border-top: 2px solid gray;\\n          padding-top: 20px;\\n        }\\n        .text-area {\\n          display: flex;\\n          flex-direction: column;\\n          align-items: center;\\n        }\\n        .text {\\n          background: rgba(235, 255, 251, 0.8);\\n          width: 85%;\\n          padding: 20px;\\n          border-radius: 5px;\\n          margin-bottom: 10px;\\n          overflow-y: auto;\\n          max-height: 200px;\\n        }\\n        .transcription-list {\\n          padding: 0;\\n          margin: 0;\\n          list-style-type: none;\\n        }\\n        .transcription-list li {\\n          margin-bottom: 5px;\\n        }\\n        .buttons {\\n          display: flex;\\n          justify-content: space-between;\\n        }\\n        .speak-button,\\n        .copy-button,\\n        .stop-button {\\n          padding: 8px 16px;\\n          font-size: 14px;\\n          border: none;\\n          border-radius: 5px;\\n          cursor: pointer;\\n          transition: background-color 0.3s ease;\\n        }\\n        .speak-button:hover {\\n          background-color: #4caf50;\\n        }\\n        .copy-button:hover {\\n          background-color: #2196f3;\\n        }\\n        .stop-button {\\n          background-color: #f44336;\\n        }\\n      \"})]});};export default FaceRecognition;","map":{"version":3,"names":["React","useState","FileUpload","useSpeechSynthesis","jsx","_jsx","jsxs","_jsxs","FaceRecognition","imageInputURL","setImageInputUrl","imageOutputURL","setImageOutputUrl","text","setText","map","setMap","speak","cancel","speakOutput","M","i","length","names","Object","keys","nameList","join","concat","Fragment","children","className","style","width","height","textShadow","color","url","src","alt","onClick","sort","key"],"sources":["D:/PROJECTS/ScanVue/client/src/components/faceRecognition.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import FileUpload from \"./FileUpload\";\r\n// import { useSpeechSynthesis } from \"react-speech-kit\";\r\n//\r\n// const FaceRecognition = () => {\r\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\r\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\r\n//   const [text, setText] = useState(\"\");\r\n//   const [map, setMap] = useState({});\r\n//   const { speak, cancel } = useSpeechSynthesis();\r\n//\r\n//   const speakOutput = (text) => {\r\n//     var M = {};\r\n//     for (var i = 0; i < text.length; i++) {\r\n//       if (!M[text[i]]) M[text[i]] = 1;\r\n//       else M[text[i]] = M[text[i]] + 1;\r\n//     }\r\n//     var xx = \"\";\r\n//     for (let i = 0; i < Object.keys(M).length; i++) {\r\n//       if (M[Object.keys(M)[i]])\r\n//         xx = xx + M[Object.keys(M)[i]] + \" \" + Object.keys(M)[i] + \", \";\r\n//     }\r\n//\r\n//     setMap(M);\r\n//\r\n//     console.log(xx);\r\n//     speak({ text: `This Image contains: ${xx}` });\r\n//   };\r\n//\r\n//   return (\r\n//     <React.Fragment>\r\n//       <div\r\n//         className=\"row m-2 p-4\"\r\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\r\n//       >\r\n//         <h1\r\n//           style={{\r\n//             fontFamily: \"Georgia, Times, serif\",\r\n//             fontSize: \"45px\",\r\n//             fontWeight: \"bolder\",\r\n//           }}\r\n//         >\r\n//           FaceRecognition\r\n//         </h1>\r\n//       </div>\r\n//       <FileUpload\r\n//         setImageInputUrl={setImageInputUrl}\r\n//         setImageOutputUrl={setImageOutputUrl}\r\n//         setText={setText}\r\n//         speak={speakOutput}\r\n//         url={\"http://localhost:5000//face-recognition\"}\r\n//       />\r\n//       <div className=\"container border my-5\">\r\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n//           {imageInputURL && (\r\n//             <div className=\"col-6 p-2\">\r\n//               <h3 className=\"display-5\">Input Image</h3>\r\n//               <img\r\n//                 style={{\r\n//                   width: \"100%\",\r\n//                   border: \"4px solid #d2d2d2\",\r\n//                   borderRadius: \"5px\",\r\n//                 }}\r\n//                 src={imageInputURL}\r\n//                 alt=\"img\"\r\n//               />\r\n//             </div>\r\n//           )}\r\n//           {imageOutputURL && (\r\n//             <div className=\"col-6 p-2\">\r\n//               <h3 className=\"display-5\">Result</h3>\r\n//               <img\r\n//                 style={{\r\n//                   width: \"100%\",\r\n//                   border: \"4px solid #d2d2d2\",\r\n//                   borderRadius: \"5px\",\r\n//                 }}\r\n//                 src={imageOutputURL}\r\n//                 alt=\"img\"\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         {text && (\r\n//           <div\r\n//             className=\"row\"\r\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\r\n//           >\r\n//             <hr />\r\n//             <h1>Image Contains:</h1>\r\n//             <hr />\r\n//             <div\r\n//               className=\"p-5 m-5\"\r\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\r\n//             >\r\n//               {Object.keys(map).map((key) => (\r\n//                 <h5 key={key}>{`${key}: ${map[key]}`}</h5>\r\n//               ))}\r\n//             </div>\r\n//             <button\r\n//               className=\"btn btn-success m-2 p-2\"\r\n//               type=\"button\"\r\n//               onClick={() => speak({ text: `This Image contains: ${text}` })}\r\n//             >\r\n//               Speak\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary m-2 p-2\"\r\n//               type=\"button\"\r\n//               onClick={cancel}\r\n//             >\r\n//               Stop\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n//\r\n// export default FaceRecognition;\r\n\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport FileUpload from \"./FileUpload\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nconst FaceRecognition = () => {\r\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\r\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [map, setMap] = useState({});\r\n  const { speak, cancel } = useSpeechSynthesis();\r\n\r\n  const speakOutput = (text) => {\r\n    const M = {};\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (!M[text[i]]) M[text[i]] = 1;\r\n      else M[text[i]] = M[text[i]] + 1;\r\n    }\r\n    let names = Object.keys(M);\r\n\r\n    if (names.length === 0) {\r\n      speak({ text: \"No faces detected\" });\r\n      return;\r\n    }\r\n\r\n    let nameList = names.join(\", \");\r\n\r\n    setMap(M);\r\n\r\n    speak({ text: `This Image contains: ${nameList}` });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"phone-container\">\r\n        <div className=\"phone\" style={{ width: \"85%\", height: \"95%\" }}>\r\n          <div className=\"phone-screen\">\r\n            <div className=\"assistant-container\">\r\n              <div className=\"assistant-content\">\r\n                <div className=\"assistant-title\">\r\n                  <h1 style={{ textShadow: \"1px 1px 2px #000\", color: \"#003366\" }}>\r\n                    Face Recognition\r\n                  </h1>\r\n                </div>\r\n                <div className=\"assistant-body\">\r\n                  <FileUpload\r\n                    setImageInputUrl={setImageInputUrl}\r\n                    setImageOutputUrl={setImageOutputUrl}\r\n                    setText={setText}\r\n                    speak={speakOutput}\r\n                    url={\"http://localhost:5000/face-recognition\"}\r\n                  />\r\n                  <div className=\"image-container\">\r\n                    {imageInputURL && (\r\n                      <div className=\"input-image\">\r\n                        <h3>Input Image</h3>\r\n                        <img src={imageInputURL} alt=\"Input\" />\r\n                      </div>\r\n                    )}\r\n                    {imageOutputURL && (\r\n                      <div className=\"output-image\">\r\n                        <h3>Result</h3>\r\n                        <img src={imageOutputURL} alt=\"Output\" />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {text && (\r\n                    <div className=\"result\">\r\n                      <h3>Face Identification:</h3>\r\n                      <div className=\"text-area\">\r\n                        <div className=\"buttons\">\r\n                          <button className=\"speak-button\" onClick={() => speakOutput(text)}>\r\n                            Speak\r\n                          </button>\r\n                          <button className=\"stop-button\" onClick={cancel}>\r\n                            Stop\r\n                          </button>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                          <ul className=\"transcription-list\">\r\n                            {Object.keys(map)\r\n                              .sort()\r\n                              .map((key) => (\r\n                                <li key={key}>{key}</li>\r\n                              ))}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <style jsx>{`\r\n        /* Styles go here */\r\n        .phone-container {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          height: 100vh;\r\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\r\n        }\r\n        .phone {\r\n          width: 85%;\r\n          height: 95%;\r\n          max-width: 750px;\r\n          background: #333;\r\n          border-radius: 20px;\r\n          overflow: hidden;\r\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n          display: flex;\r\n          flex-direction: column;\r\n        }\r\n        .phone-screen {\r\n          flex: 1;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: #fff;\r\n          padding: 20px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: center;\r\n          align-items: center;\r\n          overflow-y: auto;\r\n        }\r\n        .assistant-container {\r\n          width: 100%;\r\n          max-width: 400px;\r\n        }\r\n        .assistant-content {\r\n          text-align: center;\r\n        }\r\n        .assistant-title {\r\n          font-size: 28px;\r\n          margin-bottom: 20px;\r\n        }\r\n        .assistant-body {\r\n          margin-top: 20px;\r\n        }\r\n        .image-container {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          margin-bottom: 20px;\r\n        }\r\n        .input-image,\r\n        .output-image {\r\n          flex: 1;\r\n          text-align: center;\r\n        }\r\n        .input-image img,\r\n        .output-image img {\r\n          width: 100%;\r\n          border: 4px solid #d2d2d2;\r\n          border-radius: 5px;\r\n        }\r\n        .result {\r\n          margin-top: 30px;\r\n          border-top: 2px solid gray;\r\n          padding-top: 20px;\r\n        }\r\n        .text-area {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n        }\r\n        .text {\r\n          background: rgba(235, 255, 251, 0.8);\r\n          width: 85%;\r\n          padding: 20px;\r\n          border-radius: 5px;\r\n          margin-bottom: 10px;\r\n          overflow-y: auto;\r\n          max-height: 200px;\r\n        }\r\n        .transcription-list {\r\n          padding: 0;\r\n          margin: 0;\r\n          list-style-type: none;\r\n        }\r\n        .transcription-list li {\r\n          margin-bottom: 5px;\r\n        }\r\n        .buttons {\r\n          display: flex;\r\n          justify-content: space-between;\r\n        }\r\n        .speak-button,\r\n        .copy-button,\r\n        .stop-button {\r\n          padding: 8px 16px;\r\n          font-size: 14px;\r\n          border: none;\r\n          border-radius: 5px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s ease;\r\n        }\r\n        .speak-button:hover {\r\n          background-color: #4caf50;\r\n        }\r\n        .copy-button:hover {\r\n          background-color: #2196f3;\r\n        }\r\n        .stop-button {\r\n          background-color: #f44336;\r\n        }\r\n      `}</style>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FaceRecognition;\r\n\r\n"],"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"},"metadata":{},"sourceType":"module"}