{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n/////////////////////////////////////////////\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n//////////////////////////////////////////////////////////////","map":{"version":3,"names":[],"sources":["D:/PROJECTS/ScanVue/client/src/components/textToSpeech.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n\n/////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n//////////////////////////////////////////////////////////////\n\n\n\n"],"mappings},"metadata":{},"sourceType":"module"}